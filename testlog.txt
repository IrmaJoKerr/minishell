
Test  92: ❌ echo hi >./outfiles/outfile01 >./outfiles/outfile02 | echo bye 
Files ./mini_outfiles/outfile02 and ./bash_outfiles/outfile02 differ
mini outfiles:
bye
bash outfiles:
hi
mini output = ()
bash output = (bye)

**

 Pass 1: Parse

    echo hi has two > redirections before a |:

        >./outfiles/outfile01

        >./outfiles/outfile02

    Pipe to echo bye.

⚙️ Pass 2: Setup

    echo hi:

        FD1 (stdout) is redirected to outfile01.

        Then again to outfile02, overriding the previous one.

    Only the last redirection wins: stdout → outfile02.

🚀 Pass 3: Execution

    echo hi runs:

        Its stdout is outfile02, writes hi\n there.

    echo bye:

        stdin is from echo hi, but echo doesn't read from stdin.

        stdout → terminal or shell's STDOUT.

        Writes bye\n to output.

✅ Bash Output:

    outfile02: contains hi

    STDOUT: bye

❌ Mini Output:

    outfile02: contains bye — wrong redirection handling

    Probably redirected echo bye output to outfile02

***

Test  96: ❌ echo hi >./outfiles/outfile01 >./test_files/invalid_permission | echo bye 
Files ./mini_outfiles/outfile01 and ./bash_outfiles/outfile01 differ
mini outfiles:
hi
bash outfiles:
mini error = ( Permission denied Permission denied)
bash error = ( Permission denied)

**

Parse:

    First redirects stdout to outfile01

    Then to invalid_permission — this fails (e.g., chmod 000)

⚙️ Setup:

    Bash:

        Opens outfile01, then tries invalid_permission → fails

        Reports: Permission denied

        Doesn’t run echo hi

🚀 Execution:

    echo hi is never run

    echo bye runs with stdin from broken echo hi, so no pipe data.

    stdout: bye

✅ Bash Output:

    outfile01 is not created

    stderr: Permission denied

    stdout: bye

❌ Mini Output:

    outfile01 exists (wrong: should not run echo hi)

    stderr: twice Permission denied (should be once)

***

Test  98: ❌ echo hi >./test_files/invalid_permission >./outfiles/outfile01 | echo bye 
Only in ./mini_outfiles: outfile01
mini outfiles:
bye
bash outfiles:
cat: './bash_outfiles/*': No such file or directory
mini output = ()
bash output = (bye)

**

Parse:

    Redirection order: try invalid_permission, then outfile01

⚙️ Setup:

    Fails at invalid_permission → stops right there.

    echo hi not executed.

🚀 Execution:

    echo bye runs

    STDOUT: bye

✅ Bash:

    outfile01 not created

    Output = bye

    Exit code: 0 (pipe end ran fine)

❌ Mini:

    Created outfile01

    Did not fail as Bash does

***

Test  99: ❌ echo hi | echo bye >./test_files/invalid_permission 
mini output = (bye)
bash output = ()
mini exit code = 0
bash exit code = 1

**

Parse:

    echo hi → pipe → echo bye

    Redirect echo bye output to protected file

⚙️ Setup:

    Bash: tries to open invalid_permission for writing → fails

    Shell stops setting up redirection → doesn't exec echo bye

🚀 Execution:

    echo hi runs, its output is piped

    echo bye does not run

    Shell exits with 1

✅ Bash:

    Output: (empty)

    Exit code: 1

❌ Mini:

    Runs echo bye, writes bye to output

    Exit code: 0

***

Test 100: ❌ echo hi | >./outfiles/outfile01 echo bye >./test_files/invalid_permission 
Only in ./bash_outfiles: outfile01
mini outfiles:
cat: './mini_outfiles/*': No such file or directory
bash outfiles:
mini error = ()
bash error = ( Permission denied)

**

 Parse:

    This is valid Bash: redirection can precede the command

    Redirect stdout to outfile01, then again to invalid_permission

⚙️ Setup:

    Shell tries opening outfile01 → OK

    Then tries invalid_permission → FAIL → don’t run echo bye

🚀 Execution:

    echo hi runs

    Pipe connected to broken echo bye

    echo bye not run

    Exit code = 1

✅ Bash:

    outfile01 not created (early failure)

    echo bye skipped

    Exit = 1

❌ Mini:

    outfile01 not created

    But ran echo bye — wrong

    Exit = 0 — wrong

***


Test 101: ❌ echo hi | echo bye >./test_files/invalid_permission >./outfiles/outfile01 
mini output = (bye)
bash output = ()
mini exit code = 0
bash exit code = 1

**

Parse:

    Output of echo bye is redirected to two files

    Last redirection: outfile01

    First: invalid_permission — fails

⚙️ Setup:

    Bash: fails opening invalid_permission

    Shell stops execution

🚀 Execution:

    echo bye not run

    Pipe input (from echo hi) is useless

✅ Bash:

    No files created

    Exit = 1

❌ Mini:

    Ran echo bye, wrote to output

    Exit = 0

***

Test 122: ❌ echo hi >>./outfiles/outfile01 >>./outfiles/outfile02 | echo bye 
Files ./mini_outfiles/outfile02 and ./bash_outfiles/outfile02 differ
mini outfiles:
hbi
ye
bash outfiles:
hi
mini output = ()
bash output = (bye)

**

 Parse:

    Append twice → only >> outfile02 applies

    Pipe to echo bye

⚙️ Setup:

    FD1 → outfile02 in append mode

🚀 Execution:

    echo hi → appends to outfile02

    echo bye → stdout

✅ Bash:

    outfile02: hi

    STDOUT: bye

❌ Mini:

    Merged output (hbi\nye) means file descriptors were shared incorrectly

    Likely wrote partial content into same file from both processes

***

Test 127: ❌ echo hi >>./test_files/invalid_permission >./outfiles/outfile01 | echo bye 
Only in ./mini_outfiles: outfile01
mini outfiles:
bye
bash outfiles:
cat: './bash_outfiles/*': No such file or directory
mini output = ()
bash output = (bye)



Test 128: ❌ echo hi | echo bye >>./test_files/invalid_permission 
mini output = (bye)
bash output = ()
mini exit code = 0
bash exit code = 1



Test 129: ❌ echo hi | echo >>./outfiles/outfile01 bye >./test_files/invalid_permission 
Files ./mini_outfiles/outfile01 and ./bash_outfiles/outfile01 differ
mini outfiles:
bye
bash outfiles:
mini exit code = 0
bash exit code = 1

**

Test 127–129: Same Pattern

Bash logic:

    Redirection fails → command skipped

    Pipe continues with echo bye

    Exit = 0 or 1 depending on which end fails

Common Errors in Mini:

    Executes LHS commands even on redirection failure

    Skips proper FD1 tracking

    Fails to block execution on open() failure

***

