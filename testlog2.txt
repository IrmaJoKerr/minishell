Test  80: ❌ echo <123 <456 hi | echo 42 
mini output = ()
bash output = (42)
mini exit code = 1
bash exit code = 0
mini error = ( 'echo <123 <456 hi | echo 42' 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=CMD, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing '<' Handling regular token Processing operator '<' at pos 5, type=< Handling redirection type=< Handling redirection token at pos 5 '<' Looking for filename at position 6 Processing filename at pos 6 '1' '1' '2' '3' Extracted non-quoted filename from pos 6 to 8 '123' '<' '123' Redirection token handled successfully Redirection operator='<', filename='123' handle_redirection_token returned 1 Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing '<' Handling regular token Processing operator '<' at pos 10, type=< Handling redirection type=< Handling redirection token at pos 10 '<' Looking for filename at position 11 Processing filename at pos 11 '4' '4' '5' '6' Extracted non-quoted filename from pos 11 to 13 '456' '<' '456' Redirection token handled successfully Redirection operator='<', filename='456' handle_redirection_token returned 1 Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing 'h' Handling regular token 'i' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='hi' Created node with args[0]='hi' 'hi'] -> NULL Position update indicated, continuing '|' Handling regular token Processing operator '|' at pos 18, type=| Creating token type=|, content='|' Created node with args[0]='|' '|'] -> NULL Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing '4' Handling regular token '2' Handling regular token Creating token type=ARGS, content='42' Created node with args[0]='42' Starting append_arg left=(nil), right=(nil), redir=(nil), prev=0x56ae521edd60, next=(nil) Adding arg='42', quote_type=0 1 New args array created Freeing old arrays and assigning new ones left=(nil), right=(nil), redir=(nil), prev=0x56ae521edd60, next=(nil) Successfully appended argument 'echo'] -> NULL Tokenization completed with result=1 'echo'] -> NULL Validating redirection targets Checking redirection node type=<, filename='123' Checking redirection node type=<, filename='456' All redirection targets valid ===== PROCESSING TOKEN LIST ===== left=(nil), right=(nil), redir=(nil), prev=(nil), next=0x56ae521d1f40 left=(nil), right=(nil), redir=(nil), prev=0x56ae521d1e70, next=0x56ae521edba0 left=(nil), right=(nil), redir=(nil), prev=0x56ae521d1f40, next=0x56ae521edc90 left=(nil), right=(nil), redir=(nil), prev=0x56ae521edba0, next=0x56ae521edd60 left=(nil), right=(nil), redir=(nil), prev=0x56ae521edc90, next=0x56ae521ede30 left=(nil), right=(nil), redir=(nil), prev=0x56ae521edd60, next=(nil) Found 2 commands left=(nil), right=(nil), redir=(nil), prev=(nil), next=0x56ae521d1f40 left=(nil), right=(nil), redir=(nil), prev=0x56ae521edd60, next=(nil) ===== SETTING UP PIPE NODE ===== left=(nil), right=(nil), redir=(nil), prev=0x56ae521edc90, next=0x56ae521ede30 left=(nil), right=(nil), redir=(nil), prev=(nil), next=0x56ae521d1f40 left=(nil), right=(nil), redir=(nil), prev=0x56ae521edd60, next=(nil) left=0x56ae521d1e70, right=0x56ae521ede30, redir=(nil), prev=0x56ae521edc90, next=0x56ae521ede30 left=0x56ae521d1e70, right=0x56ae521ede30, redir=(nil), prev=0x56ae521edc90, next=0x56ae521ede30 Building redirection AST 'echo' '<' with filename '123' Processing redirection type=<, filename='123' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Checking for args after redirection '123' Finished collecting args for command 'echo' Set redir_root to redirection with filename '123' '<' with filename '456' Processing redirection type=<, filename='456' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Linking < redirection '123' to < redirection '456' Checking for args after redirection '456' Found argument 'hi' to add to command 'echo' Starting append_arg left=(nil), right=(nil), redir=(nil), prev=(nil), next=0x56ae521d1f40 Adding arg='hi', quote_type=0 1 New args array created Freeing old arrays and assigning new ones left=(nil), right=(nil), redir=(nil), prev=(nil), next=0x56ae521d1f40 Successfully appended argument Finished collecting args for command 'echo' 'echo' Redirection AST build complete left=0x56ae521d1e70, right=(nil), redir=0x56ae521edba0, prev=0x56ae521d1e70, next=0x56ae521edba0 Using pipe_root as AST root ===== PIPE EXECUTION DETAILS ===== left=0x56ae521d1e70, right=0x56ae521ede30, redir=(nil), prev=0x56ae521edc90, next=0x56ae521ede30 left=(nil), right=(nil), redir=0x56ae521d1f40, prev=(nil), next=0x56ae521d1f40 left=(nil), right=(nil), redir=0x56ae521edba0, prev=0x56ae521edd60, next=(nil) Created left child with pid=779741 Created right child with pid=779742 Parent closing pipe ends Waiting for left child (pid=779741) ===== LEFT PIPE EXECUTION DETAILS ===== left=(nil), right=(nil), redir=0x56ae521d1f40, prev=(nil), next=0x56ae521d1f40 [0]='echo' [1]='hi' <[123] <[456] Left stdout redirected to pipe write end Processing redirections ===== REDIRECTION CHAIN START ===== echo (pid=779741) < [123] stdin=0, stdout=1, stderr=2 '123' Current redirection_fd=-1, out_mode=0 ===== SETUP REDIRECTION START ===== Redirection type=<, file='123' Initial redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 Target command is 'echo' Updating last_in_redir '123' (len=3) No matching outer quotes found ===== INPUT REDIRECTION START ===== '123' stdin=0, redirection_fd=-1 Checking file access for '123' '123' File '123' not found No such file or directory File access check failed ===== INPUT REDIRECTION END (FAILED) ===== Final redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 ===== SETUP REDIRECTION END (FAILED) ===== Redirection failed for file '123' stdin=0, stdout=1 Error code=1 stdin=0, stdout=1, stderr=2 Chain failed ===== REDIRECTION CHAIN END ===== Redirection failed, writing empty output to pipe ===== RIGHT PIPE EXECUTION DETAILS ===== left=(nil), right=(nil), redir=0x56ae521edba0, prev=0x56ae521edd60, next=(nil) [0]='echo' [1]='42' <[456] Stdin redirected from pipe read end Processing redirections ===== REDIRECTION CHAIN START ===== echo (pid=779742) < [456] stdin=0, stdout=1, stderr=2 '456' Current redirection_fd=-1, out_mode=0 ===== SETUP REDIRECTION START ===== Redirection type=<, file='456' Initial redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 Target command is 'echo' Updating last_in_redir '456' (len=3) No matching outer quotes found ===== INPUT REDIRECTION START ===== '456' stdin=0, redirection_fd=-1 Checking file access for '456' '456' File '456' not found No such file or directory File access check failed ===== INPUT REDIRECTION END (FAILED) ===== Final redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 ===== SETUP REDIRECTION END (FAILED) ===== Redirection failed for file '456' stdin=0, stdout=1 Error code=1 stdin=0, stdout=1, stderr=2 Chain failed ===== REDIRECTION CHAIN END ===== Redirection failed, exiting Left child exited with status 0 Waiting for right child (pid=779742) Right child exited with status 256 Pipe execution complete, returning status 1)
bash error = ( No such file or directory)

Test  92: ❌ echo hi >./outfiles/outfile01 >./outfiles/outfile02 | echo bye 
mini output = ()
bash output = (bye)
mini error = ( 'echo hi >./outfiles/outfile01 >./outfiles/outfile02 | echo bye' 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=CMD, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing 'h' Handling regular token 'i' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='hi' Created node with args[0]='hi' Starting append_arg left=(nil), right=(nil), redir=(nil), prev=(nil), next=(nil) Adding arg='hi', quote_type=0 1 New args array created Freeing old arrays and assigning new ones left=(nil), right=(nil), redir=(nil), prev=(nil), next=(nil) Successfully appended argument 'echo'] -> NULL Position update indicated, continuing '>' Handling regular token Processing operator '>' at pos 8, type=> Handling redirection type=> Handling redirection token at pos 8 '>' Looking for filename at position 9 Processing filename at pos 9 '.' '.' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' 's' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' '0' '1' Extracted non-quoted filename from pos 9 to 28 './outfiles/outfile01' '>' './outfiles/outfile01' Redirection token handled successfully Redirection operator='>', filename='./outfiles/outfile01' handle_redirection_token returned 1 Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing '>' Handling regular token Processing operator '>' at pos 30, type=> Handling redirection type=> Handling redirection token at pos 30 '>' Looking for filename at position 31 Processing filename at pos 31 '.' '.' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' 's' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' '0' '2' Extracted non-quoted filename from pos 31 to 50 './outfiles/outfile02' '>' './outfiles/outfile02' Redirection token handled successfully Redirection operator='>', filename='./outfiles/outfile02' handle_redirection_token returned 1 Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing '|' Handling regular token Processing operator '|' at pos 52, type=| Creating token type=|, content='|' Created node with args[0]='|' '|'] -> NULL Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing 'b' Handling regular token 'y' Handling regular token 'e' Handling regular token Creating token type=ARGS, content='bye' Created node with args[0]='bye' Starting append_arg left=(nil), right=(nil), redir=(nil), prev=0x5c49901a2070, next=(nil) Adding arg='bye', quote_type=0 1 New args array created Freeing old arrays and assigning new ones left=(nil), right=(nil), redir=(nil), prev=0x5c49901a2070, next=(nil) Successfully appended argument 'echo'] -> NULL Tokenization completed with result=1 'echo'] -> NULL Validating redirection targets Checking redirection node type=>, filename='./outfiles/outfile01' Checking redirection node type=>, filename='./outfiles/outfile02' All redirection targets valid ===== PROCESSING TOKEN LIST ===== left=(nil), right=(nil), redir=(nil), prev=(nil), next=0x5c49901a1e90 left=(nil), right=(nil), redir=(nil), prev=0x5c49901a1dc0, next=0x5c49901a2020 left=(nil), right=(nil), redir=(nil), prev=0x5c49901a1e90, next=0x5c49901a2070 left=(nil), right=(nil), redir=(nil), prev=0x5c49901a2020, next=0x5c49901a2140 left=(nil), right=(nil), redir=(nil), prev=0x5c49901a2070, next=(nil) Found 2 commands left=(nil), right=(nil), redir=(nil), prev=(nil), next=0x5c49901a1e90 left=(nil), right=(nil), redir=(nil), prev=0x5c49901a2070, next=(nil) ===== SETTING UP PIPE NODE ===== left=(nil), right=(nil), redir=(nil), prev=0x5c49901a2020, next=0x5c49901a2140 left=(nil), right=(nil), redir=(nil), prev=(nil), next=0x5c49901a1e90 left=(nil), right=(nil), redir=(nil), prev=0x5c49901a2070, next=(nil) left=0x5c49901a1dc0, right=0x5c49901a2140, redir=(nil), prev=0x5c49901a2020, next=0x5c49901a2140 left=0x5c49901a1dc0, right=0x5c49901a2140, redir=(nil), prev=0x5c49901a2020, next=0x5c49901a2140 Building redirection AST 'echo' '>' with filename './outfiles/outfile01' Processing redirection type=>, filename='./outfiles/outfile01' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Checking for args after redirection './outfiles/outfile01' Finished collecting args for command 'echo' Set redir_root to redirection with filename './outfiles/outfile01' '>' with filename './outfiles/outfile02' Processing redirection type=>, filename='./outfiles/outfile02' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Linking > redirection './outfiles/outfile01' to > redirection './outfiles/outfile02' Checking for args after redirection './outfiles/outfile02' Finished collecting args for command 'echo' 'echo' Redirection AST build complete left=0x5c49901a1dc0, right=(nil), redir=0x5c49901a2020, prev=0x5c49901a1dc0, next=0x5c49901a2020 Using pipe_root as AST root ===== PIPE EXECUTION DETAILS ===== left=0x5c49901a1dc0, right=0x5c49901a2140, redir=(nil), prev=0x5c49901a2020, next=0x5c49901a2140 left=(nil), right=(nil), redir=0x5c49901a1e90, prev=(nil), next=0x5c49901a1e90 left=(nil), right=(nil), redir=0x5c49901a2020, prev=0x5c49901a2070, next=(nil) Created left child with pid=780229 ===== LEFT PIPE EXECUTION DETAILS ===== Created right child with pid=780230 Parent closing pipe ends Waiting for left child (pid=780229) left=(nil), right=(nil), redir=0x5c49901a1e90, prev=(nil), next=0x5c49901a1e90 [0]='echo' [1]='hi' >[./outfiles/outfile01] >[./outfiles/outfile02] Left stdout redirected to pipe write end Processing redirections ===== REDIRECTION CHAIN START ===== echo (pid=780229) > [./outfiles/outfile01] stdin=0, stdout=1, stderr=2 './outfiles/outfile01' Current redirection_fd=-1, out_mode=0 ===== SETUP REDIRECTION START ===== Redirection type=>, file='./outfiles/outfile01' Initial redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 Target command is 'echo' Updating last_out_redir './outfiles/outfile01' (len=20) No matching outer quotes found ===== OUTPUT REDIRECTION START ===== './outfiles/outfile01' stdout=1, redirection_fd=-1, out_mode=1 Using truncate mode Checking permissions for './outfiles/outfile01' ===== RIGHT PIPE EXECUTION DETAILS ===== ===== SETUP OUTPUT FILE START ===== './outfiles/outfile01' stdout=1, redirection_fd=-1 1 Using truncate mode Opening file './outfiles/outfile01' with mode 577 left=(nil), right=(nil), redir=0x5c49901a2020, prev=0x5c49901a2070, next=(nil) [0]='echo' [1]='bye' >[./outfiles/outfile02] Stdin redirected from pipe read end Processing redirections ===== REDIRECTION CHAIN START ===== echo (pid=780230) > [./outfiles/outfile02] stdin=0, stdout=1, stderr=2 './outfiles/outfile02' Current redirection_fd=-1, out_mode=0 ===== SETUP REDIRECTION START ===== Redirection type=>, file='./outfiles/outfile02' Initial redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 Target command is 'echo' Updating last_out_redir './outfiles/outfile02' (len=20) Opened file with fd=3 No matching outer quotes found Redirecting stdout to fd 3 ===== OUTPUT REDIRECTION START ===== './outfiles/outfile02' stdout=1, redirection_fd=-1, out_mode=1 Using truncate mode Checking permissions for './outfiles/outfile02' stdout=1, redirection_fd=3 ===== SETUP OUTPUT FILE END (SUCCESS) ===== stdout=1, redirection_fd=3, out_mode=1 ===== OUTPUT REDIRECTION END (SUCCESS) ===== Final redirection_fd=3, out_mode=1 stdin=0, stdout=1, stderr=2 ===== SETUP OUTPUT FILE START ===== ===== SETUP REDIRECTION END (SUCCESS) ===== './outfiles/outfile02' 0x5c49901a2020 stdout=1, redirection_fd=-1 Next is > [./outfiles/outfile02] 1 './outfiles/outfile02' Using truncate mode Current redirection_fd=3, out_mode=1 Opening file './outfiles/outfile02' with mode 577 ===== SETUP REDIRECTION START ===== Redirection type=>, file='./outfiles/outfile02' Initial redirection_fd=3, out_mode=1 stdin=0, stdout=1, stderr=2 Target command is 'echo' Updating last_out_redir './outfiles/outfile02' (len=20) No matching outer quotes found ===== OUTPUT REDIRECTION START ===== './outfiles/outfile02' stdout=1, redirection_fd=3, out_mode=1 Using truncate mode Closing previous fd 3 Checking permissions for './outfiles/outfile02' ===== SETUP OUTPUT FILE START ===== './outfiles/outfile02' stdout=1, redirection_fd=-1 1 Using truncate mode Opening file './outfiles/outfile02' with mode 577 Opened file with fd=3 Redirecting stdout to fd 3 stdout=1, redirection_fd=3 ===== SETUP OUTPUT FILE END (SUCCESS) ===== stdout=1, redirection_fd=3, out_mode=1 ===== OUTPUT REDIRECTION END (SUCCESS) ===== Final redirection_fd=3, out_mode=1 stdin=0, stdout=1, stderr=2 ===== SETUP REDIRECTION END (SUCCESS) ===== (nil) stdin=0, stdout=1, stderr=2 Opened file with fd=3 Chain completed successfully Redirecting stdout to fd 3 ===== REDIRECTION CHAIN END ===== stdout=1, redirection_fd=3 ===== SETUP OUTPUT FILE END (SUCCESS) ===== stdout=1, redirection_fd=3, out_mode=1 ===== OUTPUT REDIRECTION END (SUCCESS) ===== Final redirection_fd=3, out_mode=1 stdin=0, stdout=1, stderr=2 ===== SETUP REDIRECTION END (SUCCESS) ===== (nil) stdin=0, stdout=1, stderr=2 Chain completed successfully ===== REDIRECTION CHAIN END ===== 'echo' 'hi' 0 0 Left child exited with status 0 Waiting for right child (pid=780230) Right child exited with status 0 Pipe execution complete, returning status 0)
bash error = ()

Test  96: ❌ echo hi >./outfiles/outfile01 >./test_files/invalid_permission | echo bye 
mini output = ()
bash output = (bye)
mini exit code = 1
bash exit code = 0
mini error = ( 'echo hi >./outfiles/outfile01 >./test_files/invalid_permission | echo bye' 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=CMD, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing 'h' Handling regular token 'i' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='hi' Created node with args[0]='hi' Starting append_arg left=(nil), right=(nil), redir=(nil), prev=(nil), next=(nil) Adding arg='hi', quote_type=0 1 New args array created Freeing old arrays and assigning new ones left=(nil), right=(nil), redir=(nil), prev=(nil), next=(nil) Successfully appended argument 'echo'] -> NULL Position update indicated, continuing '>' Handling regular token Processing operator '>' at pos 8, type=> Handling redirection type=> Handling redirection token at pos 8 '>' Looking for filename at position 9 Processing filename at pos 9 '.' '.' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' 's' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' '0' '1' Extracted non-quoted filename from pos 9 to 28 './outfiles/outfile01' '>' './outfiles/outfile01' Redirection token handled successfully Redirection operator='>', filename='./outfiles/outfile01' handle_redirection_token returned 1 Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing '>' Handling regular token Processing operator '>' at pos 30, type=> Handling redirection type=> Handling redirection token at pos 30 '>' Looking for filename at position 31 Processing filename at pos 31 '.' '.' '/' 't' 'e' 's' 't' '_' 'f' 'i' 'l' 'e' 's' '/' 'i' 'n' 'v' 'a' 'l' 'i' 'd' '_' 'p' 'e' 'r' 'm' 'i' 's' 's' 'i' 'o' 'n' Extracted non-quoted filename from pos 31 to 61 './test_files/invalid_permission' '>' './test_files/invalid_permission' Redirection token handled successfully Redirection operator='>', filename='./test_files/invalid_permission' handle_redirection_token returned 1 Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing '|' Handling regular token Processing operator '|' at pos 63, type=| Creating token type=|, content='|' Created node with args[0]='|' '|'] -> NULL Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing 'b' Handling regular token 'y' Handling regular token 'e' Handling regular token Creating token type=ARGS, content='bye' Created node with args[0]='bye' Starting append_arg left=(nil), right=(nil), redir=(nil), prev=0x632172285e80, next=(nil) Adding arg='bye', quote_type=0 1 New args array created Freeing old arrays and assigning new ones left=(nil), right=(nil), redir=(nil), prev=0x632172285e80, next=(nil) Successfully appended argument 'echo'] -> NULL Tokenization completed with result=1 'echo'] -> NULL Validating redirection targets Checking redirection node type=>, filename='./outfiles/outfile01' Checking redirection node type=>, filename='./test_files/invalid_permission' All redirection targets valid ===== PROCESSING TOKEN LIST ===== left=(nil), right=(nil), redir=(nil), prev=(nil), next=0x632172285ca0 left=(nil), right=(nil), redir=(nil), prev=0x632172285bb0, next=0x632172285e30 left=(nil), right=(nil), redir=(nil), prev=0x632172285ca0, next=0x632172285e80 left=(nil), right=(nil), redir=(nil), prev=0x632172285e30, next=0x632172285f30 left=(nil), right=(nil), redir=(nil), prev=0x632172285e80, next=(nil) Found 2 commands left=(nil), right=(nil), redir=(nil), prev=(nil), next=0x632172285ca0 left=(nil), right=(nil), redir=(nil), prev=0x632172285e80, next=(nil) ===== SETTING UP PIPE NODE ===== left=(nil), right=(nil), redir=(nil), prev=0x632172285e30, next=0x632172285f30 left=(nil), right=(nil), redir=(nil), prev=(nil), next=0x632172285ca0 left=(nil), right=(nil), redir=(nil), prev=0x632172285e80, next=(nil) left=0x632172285bb0, right=0x632172285f30, redir=(nil), prev=0x632172285e30, next=0x632172285f30 left=0x632172285bb0, right=0x632172285f30, redir=(nil), prev=0x632172285e30, next=0x632172285f30 Building redirection AST 'echo' '>' with filename './outfiles/outfile01' Processing redirection type=>, filename='./outfiles/outfile01' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Checking for args after redirection './outfiles/outfile01' Finished collecting args for command 'echo' Set redir_root to redirection with filename './outfiles/outfile01' '>' with filename './test_files/invalid_permission' Processing redirection type=>, filename='./test_files/invalid_permission' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Linking > redirection './outfiles/outfile01' to > redirection './test_files/invalid_permission' Checking for args after redirection './test_files/invalid_permission' Finished collecting args for command 'echo' 'echo' Redirection AST build complete left=0x632172285bb0, right=(nil), redir=0x632172285e30, prev=0x632172285bb0, next=0x632172285e30 Using pipe_root as AST root ===== PIPE EXECUTION DETAILS ===== left=0x632172285bb0, right=0x632172285f30, redir=(nil), prev=0x632172285e30, next=0x632172285f30 left=(nil), right=(nil), redir=0x632172285ca0, prev=(nil), next=0x632172285ca0 left=(nil), right=(nil), redir=0x632172285e30, prev=0x632172285e80, next=(nil) Created left child with pid=780413 ===== LEFT PIPE EXECUTION DETAILS ===== Created right child with pid=780414 Parent closing pipe ends Waiting for left child (pid=780413) left=(nil), right=(nil), redir=0x632172285ca0, prev=(nil), next=0x632172285ca0 [0]='echo' [1]='hi' >[./outfiles/outfile01] >[./test_files/invalid_permission] Left stdout redirected to pipe write end Processing redirections ===== REDIRECTION CHAIN START ===== echo (pid=780413) > [./outfiles/outfile01] stdin=0, stdout=1, stderr=2 './outfiles/outfile01' Current redirection_fd=-1, out_mode=0 ===== SETUP REDIRECTION START ===== Redirection type=>, file='./outfiles/outfile01' Initial redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 Target command is 'echo' Updating last_out_redir './outfiles/outfile01' (len=20) No matching outer quotes found ===== OUTPUT REDIRECTION START ===== './outfiles/outfile01' stdout=1, redirection_fd=-1, out_mode=1 Using truncate mode Checking permissions for './outfiles/outfile01' ===== SETUP OUTPUT FILE START ===== './outfiles/outfile01' stdout=1, redirection_fd=-1 1 Using truncate mode Opening file './outfiles/outfile01' with mode 577 ===== RIGHT PIPE EXECUTION DETAILS ===== left=(nil), right=(nil), redir=0x632172285e30, prev=0x632172285e80, next=(nil) [0]='echo' [1]='bye' Opened file with fd=3 Redirecting stdout to fd 3 stdout=1, redirection_fd=3 ===== SETUP OUTPUT FILE END (SUCCESS) ===== stdout=1, redirection_fd=3, out_mode=1 ===== OUTPUT REDIRECTION END (SUCCESS) ===== Final redirection_fd=3, out_mode=1 stdin=0, stdout=1, stderr=2 ===== SETUP REDIRECTION END (SUCCESS) ===== 0x632172285e30 Next is > [./test_files/invalid_permission] './test_files/invalid_permission' Current redirection_fd=3, out_mode=1 ===== SETUP REDIRECTION START ===== Redirection type=>, file='./test_files/invalid_permission' Initial redirection_fd=3, out_mode=1 stdin=0, stdout=1, stderr=2 Target command is 'echo' Updating last_out_redir './test_files/invalid_permission' (len=31) No matching outer quotes found ===== OUTPUT REDIRECTION START ===== './test_files/invalid_permission' stdout=1, redirection_fd=3, out_mode=1 Using truncate mode Closing previous fd 3 Checking permissions for './test_files/invalid_permission' Permission denied Permission check failed ===== OUTPUT REDIRECTION END (FAILED) ===== Final redirection_fd=-1, out_mode=1 stdin=0, stdout=1, stderr=2 ===== SETUP REDIRECTION END (FAILED) ===== Redirection failed for file './test_files/invalid_permission' stdin=0, stdout=1 Error code=1 stdin=0, stdout=1, stderr=2 Chain failed ===== REDIRECTION CHAIN END ===== Redirection failed, writing empty output to pipe >[./test_files/invalid_permission] Stdin redirected from pipe read end Processing redirections ===== REDIRECTION CHAIN START ===== echo (pid=780414) > [./test_files/invalid_permission] stdin=0, stdout=1, stderr=2 './test_files/invalid_permission' Current redirection_fd=-1, out_mode=0 ===== SETUP REDIRECTION START ===== Redirection type=>, file='./test_files/invalid_permission' Initial redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 Target command is 'echo' Updating last_out_redir './test_files/invalid_permission' (len=31) No matching outer quotes found ===== OUTPUT REDIRECTION START ===== './test_files/invalid_permission' stdout=1, redirection_fd=-1, out_mode=1 Using truncate mode Checking permissions for './test_files/invalid_permission' Permission denied Permission check failed ===== OUTPUT REDIRECTION END (FAILED) ===== Final redirection_fd=-1, out_mode=1 stdin=0, stdout=1, stderr=2 ===== SETUP REDIRECTION END (FAILED) ===== Redirection failed for file './test_files/invalid_permission' stdin=0, stdout=1 Error code=1 stdin=0, stdout=1, stderr=2 Chain failed ===== REDIRECTION CHAIN END ===== Redirection failed, exiting Left child exited with status 0 Waiting for right child (pid=780414) Right child exited with status 256 Pipe execution complete, returning status 1)
bash error = ( Permission denied)

Test  98: ❌ echo hi >./test_files/invalid_permission >./outfiles/outfile01 | echo bye 
Only in ./mini_outfiles: outfile01
mini outfiles:
bye
bash outfiles:
cat: './bash_outfiles/*': No such file or directory
mini output = ()
bash output = (bye)
mini error = ( 'echo hi >./test_files/invalid_permission >./outfiles/outfile01 | echo bye' 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=CMD, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing 'h' Handling regular token 'i' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='hi' Created node with args[0]='hi' Starting append_arg left=(nil), right=(nil), redir=(nil), prev=(nil), next=(nil) Adding arg='hi', quote_type=0 1 New args array created Freeing old arrays and assigning new ones left=(nil), right=(nil), redir=(nil), prev=(nil), next=(nil) Successfully appended argument 'echo'] -> NULL Position update indicated, continuing '>' Handling regular token Processing operator '>' at pos 8, type=> Handling redirection type=> Handling redirection token at pos 8 '>' Looking for filename at position 9 Processing filename at pos 9 '.' '.' '/' 't' 'e' 's' 't' '_' 'f' 'i' 'l' 'e' 's' '/' 'i' 'n' 'v' 'a' 'l' 'i' 'd' '_' 'p' 'e' 'r' 'm' 'i' 's' 's' 'i' 'o' 'n' Extracted non-quoted filename from pos 9 to 39 './test_files/invalid_permission' '>' './test_files/invalid_permission' Redirection token handled successfully Redirection operator='>', filename='./test_files/invalid_permission' handle_redirection_token returned 1 Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing '>' Handling regular token Processing operator '>' at pos 41, type=> Handling redirection type=> Handling redirection token at pos 41 '>' Looking for filename at position 42 Processing filename at pos 42 '.' '.' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' 's' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' '0' '1' Extracted non-quoted filename from pos 42 to 61 './outfiles/outfile01' '>' './outfiles/outfile01' Redirection token handled successfully Redirection operator='>', filename='./outfiles/outfile01' handle_redirection_token returned 1 Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing '|' Handling regular token Processing operator '|' at pos 63, type=| Creating token type=|, content='|' Created node with args[0]='|' '|'] -> NULL Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing 'b' Handling regular token 'y' Handling regular token 'e' Handling regular token Creating token type=ARGS, content='bye' Created node with args[0]='bye' Starting append_arg left=(nil), right=(nil), redir=(nil), prev=0x5f0e2fc294f0, next=(nil) Adding arg='bye', quote_type=0 1 New args array created Freeing old arrays and assigning new ones left=(nil), right=(nil), redir=(nil), prev=0x5f0e2fc294f0, next=(nil) Successfully appended argument 'echo'] -> NULL Tokenization completed with result=1 'echo'] -> NULL Validating redirection targets Checking redirection node type=>, filename='./test_files/invalid_permission' Checking redirection node type=>, filename='./outfiles/outfile01' All redirection targets valid ===== PROCESSING TOKEN LIST ===== left=(nil), right=(nil), redir=(nil), prev=(nil), next=0x5f0e2fc29310 left=(nil), right=(nil), redir=(nil), prev=0x5f0e2fc29220, next=0x5f0e2fc294a0 left=(nil), right=(nil), redir=(nil), prev=0x5f0e2fc29310, next=0x5f0e2fc294f0 left=(nil), right=(nil), redir=(nil), prev=0x5f0e2fc294a0, next=0x5f0e2fc295a0 left=(nil), right=(nil), redir=(nil), prev=0x5f0e2fc294f0, next=(nil) Found 2 commands left=(nil), right=(nil), redir=(nil), prev=(nil), next=0x5f0e2fc29310 left=(nil), right=(nil), redir=(nil), prev=0x5f0e2fc294f0, next=(nil) ===== SETTING UP PIPE NODE ===== left=(nil), right=(nil), redir=(nil), prev=0x5f0e2fc294a0, next=0x5f0e2fc295a0 left=(nil), right=(nil), redir=(nil), prev=(nil), next=0x5f0e2fc29310 left=(nil), right=(nil), redir=(nil), prev=0x5f0e2fc294f0, next=(nil) left=0x5f0e2fc29220, right=0x5f0e2fc295a0, redir=(nil), prev=0x5f0e2fc294a0, next=0x5f0e2fc295a0 left=0x5f0e2fc29220, right=0x5f0e2fc295a0, redir=(nil), prev=0x5f0e2fc294a0, next=0x5f0e2fc295a0 Building redirection AST 'echo' '>' with filename './test_files/invalid_permission' Processing redirection type=>, filename='./test_files/invalid_permission' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Checking for args after redirection './test_files/invalid_permission' Finished collecting args for command 'echo' Set redir_root to redirection with filename './test_files/invalid_permission' '>' with filename './outfiles/outfile01' Processing redirection type=>, filename='./outfiles/outfile01' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Linking > redirection './test_files/invalid_permission' to > redirection './outfiles/outfile01' Checking for args after redirection './outfiles/outfile01' Finished collecting args for command 'echo' 'echo' Redirection AST build complete left=0x5f0e2fc29220, right=(nil), redir=0x5f0e2fc294a0, prev=0x5f0e2fc29220, next=0x5f0e2fc294a0 Using pipe_root as AST root ===== PIPE EXECUTION DETAILS ===== left=0x5f0e2fc29220, right=0x5f0e2fc295a0, redir=(nil), prev=0x5f0e2fc294a0, next=0x5f0e2fc295a0 left=(nil), right=(nil), redir=0x5f0e2fc29310, prev=(nil), next=0x5f0e2fc29310 left=(nil), right=(nil), redir=0x5f0e2fc294a0, prev=0x5f0e2fc294f0, next=(nil) Created left child with pid=780505 ===== LEFT PIPE EXECUTION DETAILS ===== left=(nil), right=(nil), redir=0x5f0e2fc29310, prev=(nil), next=0x5f0e2fc29310 [0]='echo' [1]='hi' Created right child with pid=780506 >[./test_files/invalid_permission] >[./outfiles/outfile01] Left stdout redirected to pipe write end Processing redirections ===== REDIRECTION CHAIN START ===== Parent closing pipe ends echo (pid=780505) > [./test_files/invalid_permission] Waiting for left child (pid=780505) stdin=0, stdout=1, stderr=2 './test_files/invalid_permission' Current redirection_fd=-1, out_mode=0 ===== SETUP REDIRECTION START ===== Redirection type=>, file='./test_files/invalid_permission' Initial redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 Target command is 'echo' Updating last_out_redir './test_files/invalid_permission' (len=31) No matching outer quotes found ===== OUTPUT REDIRECTION START ===== './test_files/invalid_permission' stdout=1, redirection_fd=-1, out_mode=1 Using truncate mode Checking permissions for './test_files/invalid_permission' Permission denied Permission check failed ===== OUTPUT REDIRECTION END (FAILED) ===== Final redirection_fd=-1, out_mode=1 stdin=0, stdout=1, stderr=2 ===== SETUP REDIRECTION END (FAILED) ===== Redirection failed for file './test_files/invalid_permission' stdin=0, stdout=1 ===== RIGHT PIPE EXECUTION DETAILS ===== Error code=1 stdin=0, stdout=1, stderr=2 Chain failed ===== REDIRECTION CHAIN END ===== Redirection failed, writing empty output to pipe left=(nil), right=(nil), redir=0x5f0e2fc294a0, prev=0x5f0e2fc294f0, next=(nil) [0]='echo' [1]='bye' >[./outfiles/outfile01] Stdin redirected from pipe read end Processing redirections ===== REDIRECTION CHAIN START ===== echo (pid=780506) > [./outfiles/outfile01] stdin=0, stdout=1, stderr=2 './outfiles/outfile01' Current redirection_fd=-1, out_mode=0 ===== SETUP REDIRECTION START ===== Redirection type=>, file='./outfiles/outfile01' Initial redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 Target command is 'echo' Updating last_out_redir './outfiles/outfile01' (len=20) No matching outer quotes found ===== OUTPUT REDIRECTION START ===== './outfiles/outfile01' stdout=1, redirection_fd=-1, out_mode=1 Using truncate mode Checking permissions for './outfiles/outfile01' ===== SETUP OUTPUT FILE START ===== './outfiles/outfile01' stdout=1, redirection_fd=-1 1 Using truncate mode Opening file './outfiles/outfile01' with mode 577 Opened file with fd=3 Redirecting stdout to fd 3 stdout=1, redirection_fd=3 ===== SETUP OUTPUT FILE END (SUCCESS) ===== stdout=1, redirection_fd=3, out_mode=1 ===== OUTPUT REDIRECTION END (SUCCESS) ===== Final redirection_fd=3, out_mode=1 stdin=0, stdout=1, stderr=2 ===== SETUP REDIRECTION END (SUCCESS) ===== (nil) stdin=0, stdout=1, stderr=2 Chain completed successfully ===== REDIRECTION CHAIN END ===== 'echo' 'bye' 0 Left child exited with status 0 Waiting for right child (pid=780506) Right child exited with status 0 Pipe execution complete, returning status 0)
bash error = ( Permission denied)

Test 100: ❌ echo hi | >./outfiles/outfile01 echo bye >./test_files/invalid_permission 
Only in ./bash_outfiles: outfile01
mini outfiles:
cat: './mini_outfiles/*': No such file or directory
bash outfiles:
mini error = ( 'echo hi | >./outfiles/outfile01 echo bye >./test_files/invalid_permission' 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=CMD, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing 'h' Handling regular token 'i' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='hi' Created node with args[0]='hi' Starting append_arg left=(nil), right=(nil), redir=(nil), prev=(nil), next=(nil) Adding arg='hi', quote_type=0 1 New args array created Freeing old arrays and assigning new ones left=(nil), right=(nil), redir=(nil), prev=(nil), next=(nil) Successfully appended argument 'echo'] -> NULL Position update indicated, continuing '|' Handling regular token Processing operator '|' at pos 8, type=| Creating token type=|, content='|' Created node with args[0]='|' '|'] -> NULL Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing '>' Handling regular token Processing operator '>' at pos 10, type=> Handling redirection type=> Handling redirection token at pos 10 '>' Looking for filename at position 11 Processing filename at pos 11 '.' '.' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' 's' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' '0' '1' Extracted non-quoted filename from pos 11 to 30 './outfiles/outfile01' '>' './outfiles/outfile01' Redirection token handled successfully Redirection operator='>', filename='./outfiles/outfile01' handle_redirection_token returned 1 Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing 'b' Handling regular token 'y' Handling regular token 'e' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='bye' Created node with args[0]='bye' 'bye'] -> NULL Position update indicated, continuing '>' Handling regular token Processing operator '>' at pos 41, type=> Handling redirection type=> Handling redirection token at pos 41 '>' Looking for filename at position 42 Processing filename at pos 42 '.' '.' '/' 't' 'e' 's' 't' '_' 'f' 'i' 'l' 'e' 's' '/' 'i' 'n' 'v' 'a' 'l' 'i' 'd' '_' 'p' 'e' 'r' 'm' 'i' 's' 's' 'i' 'o' 'n' Extracted non-quoted filename from pos 42 to 72 './test_files/invalid_permission' '>' './test_files/invalid_permission' Redirection token handled successfully Redirection operator='>', filename='./test_files/invalid_permission' handle_redirection_token returned 1 Position update indicated, continuing Tokenization completed with result=1 './test_files/invalid_permission'] -> NULL Validating redirection targets Checking redirection node type=>, filename='./outfiles/outfile01' Checking redirection node type=>, filename='./test_files/invalid_permission' All redirection targets valid ===== PROCESSING TOKEN LIST ===== left=(nil), right=(nil), redir=(nil), prev=(nil), next=0x622103488c20 left=(nil), right=(nil), redir=(nil), prev=0x622103488b30, next=0x622103488db0 left=(nil), right=(nil), redir=(nil), prev=0x622103488c20, next=0x622103488e00 left=(nil), right=(nil), redir=(nil), prev=0x622103488db0, next=0x622103488ed0 left=(nil), right=(nil), redir=(nil), prev=0x622103488e00, next=0x622103488fa0 left=(nil), right=(nil), redir=(nil), prev=0x622103488ed0, next=(nil) Found 1 commands left=(nil), right=(nil), redir=(nil), prev=(nil), next=0x622103488c20 No pipe root created Building redirection AST 'echo' '>' with filename './outfiles/outfile01' Processing redirection type=>, filename='./outfiles/outfile01' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Checking for args after redirection './outfiles/outfile01' Found argument 'echo' to add to command 'echo' Starting append_arg left=(nil), right=(nil), redir=(nil), prev=(nil), next=0x622103488c20 Adding arg='echo', quote_type=0 2 New args array created Freeing old arrays and assigning new ones left=(nil), right=(nil), redir=(nil), prev=(nil), next=0x622103488c20 Successfully appended argument Found argument 'bye' to add to command 'echo' Starting append_arg left=(nil), right=(nil), redir=(nil), prev=(nil), next=0x622103488c20 Adding arg='bye', quote_type=0 3 New args array created Freeing old arrays and assigning new ones left=(nil), right=(nil), redir=(nil), prev=(nil), next=0x622103488c20 Successfully appended argument Finished collecting args for command 'echo' Set redir_root to redirection with filename './outfiles/outfile01' '>' with filename './test_files/invalid_permission' Processing redirection type=>, filename='./test_files/invalid_permission' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Linking > redirection './outfiles/outfile01' to > redirection './test_files/invalid_permission' Checking for args after redirection './test_files/invalid_permission' Finished collecting args for command 'echo' Redirection AST build complete left=0x622103488b30, right=(nil), redir=0x622103488fa0, prev=0x622103488c20, next=0x622103488e00 Using redir_root as AST root './outfiles/outfile01' ===== REDIRECTION CHAIN START ===== echo (pid=780593) > [./outfiles/outfile01] stdin=0, stdout=1, stderr=2 './outfiles/outfile01' Current redirection_fd=-1, out_mode=0 ===== SETUP REDIRECTION START ===== Redirection type=>, file='./outfiles/outfile01' Initial redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 No target command found ===== SETUP REDIRECTION END (FAILED) ===== Redirection failed for file './outfiles/outfile01' stdin=0, stdout=1 Error code=1 stdin=0, stdout=1, stderr=2 Chain failed ===== REDIRECTION CHAIN END ===== err=1)
bash error = ( Permission denied)

Test 122: ❌ echo hi >>./outfiles/outfile01 >>./outfiles/outfile02 | echo bye 
Files ./mini_outfiles/outfile02 and ./bash_outfiles/outfile02 differ
mini outfiles:
bye
hi
bash outfiles:
hi
mini output = ()
bash output = (bye)
mini error = ( 'echo hi >>./outfiles/outfile01 >>./outfiles/outfile02 | echo bye' 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=CMD, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing 'h' Handling regular token 'i' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='hi' Created node with args[0]='hi' Starting append_arg left=(nil), right=(nil), redir=(nil), prev=(nil), next=(nil) Adding arg='hi', quote_type=0 1 New args array created Freeing old arrays and assigning new ones left=(nil), right=(nil), redir=(nil), prev=(nil), next=(nil) Successfully appended argument 'echo'] -> NULL Position update indicated, continuing '>' Handling regular token Processing operator '>' at pos 8, type=>> Handling redirection type=>> Handling redirection token at pos 8 '>>' Looking for filename at position 10 Processing filename at pos 10 '.' '.' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' 's' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' '0' '1' Extracted non-quoted filename from pos 10 to 29 './outfiles/outfile01' '>>' './outfiles/outfile01' Redirection token handled successfully Redirection operator='>>', filename='./outfiles/outfile01' handle_redirection_token returned 1 Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing '>' Handling regular token Processing operator '>' at pos 31, type=>> Handling redirection type=>> Handling redirection token at pos 31 '>>' Looking for filename at position 33 Processing filename at pos 33 '.' '.' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' 's' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' '0' '2' Extracted non-quoted filename from pos 33 to 52 './outfiles/outfile02' '>>' './outfiles/outfile02' Redirection token handled successfully Redirection operator='>>', filename='./outfiles/outfile02' handle_redirection_token returned 1 Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing '|' Handling regular token Processing operator '|' at pos 54, type=| Creating token type=|, content='|' Created node with args[0]='|' '|'] -> NULL Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing 'b' Handling regular token 'y' Handling regular token 'e' Handling regular token Creating token type=ARGS, content='bye' Created node with args[0]='bye' Starting append_arg left=(nil), right=(nil), redir=(nil), prev=0x6313f6f47410, next=(nil) Adding arg='bye', quote_type=0 1 New args array created Freeing old arrays and assigning new ones left=(nil), right=(nil), redir=(nil), prev=0x6313f6f47410, next=(nil) Successfully appended argument 'echo'] -> NULL Tokenization completed with result=1 'echo'] -> NULL Validating redirection targets Checking redirection node type=>>, filename='./outfiles/outfile01' Checking redirection node type=>>, filename='./outfiles/outfile02' All redirection targets valid ===== PROCESSING TOKEN LIST ===== left=(nil), right=(nil), redir=(nil), prev=(nil), next=0x6313f6f47230 left=(nil), right=(nil), redir=(nil), prev=0x6313f6f47160, next=0x6313f6f473c0 left=(nil), right=(nil), redir=(nil), prev=0x6313f6f47230, next=0x6313f6f47410 left=(nil), right=(nil), redir=(nil), prev=0x6313f6f473c0, next=0x6313f6f474e0 left=(nil), right=(nil), redir=(nil), prev=0x6313f6f47410, next=(nil) Found 2 commands left=(nil), right=(nil), redir=(nil), prev=(nil), next=0x6313f6f47230 left=(nil), right=(nil), redir=(nil), prev=0x6313f6f47410, next=(nil) ===== SETTING UP PIPE NODE ===== left=(nil), right=(nil), redir=(nil), prev=0x6313f6f473c0, next=0x6313f6f474e0 left=(nil), right=(nil), redir=(nil), prev=(nil), next=0x6313f6f47230 left=(nil), right=(nil), redir=(nil), prev=0x6313f6f47410, next=(nil) left=0x6313f6f47160, right=0x6313f6f474e0, redir=(nil), prev=0x6313f6f473c0, next=0x6313f6f474e0 left=0x6313f6f47160, right=0x6313f6f474e0, redir=(nil), prev=0x6313f6f473c0, next=0x6313f6f474e0 Building redirection AST 'echo' '>>' with filename './outfiles/outfile01' Processing redirection type=>>, filename='./outfiles/outfile01' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Checking for args after redirection './outfiles/outfile01' Finished collecting args for command 'echo' Set redir_root to redirection with filename './outfiles/outfile01' '>>' with filename './outfiles/outfile02' Processing redirection type=>>, filename='./outfiles/outfile02' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Linking >> redirection './outfiles/outfile01' to >> redirection './outfiles/outfile02' Checking for args after redirection './outfiles/outfile02' Finished collecting args for command 'echo' 'echo' Redirection AST build complete left=0x6313f6f47160, right=(nil), redir=0x6313f6f473c0, prev=0x6313f6f47160, next=0x6313f6f473c0 Using pipe_root as AST root ===== PIPE EXECUTION DETAILS ===== left=0x6313f6f47160, right=0x6313f6f474e0, redir=(nil), prev=0x6313f6f473c0, next=0x6313f6f474e0 left=(nil), right=(nil), redir=0x6313f6f47230, prev=(nil), next=0x6313f6f47230 left=(nil), right=(nil), redir=0x6313f6f473c0, prev=0x6313f6f47410, next=(nil) Created left child with pid=781473 Created right child with pid=781474 Parent closing pipe ends Waiting for left child (pid=781473) ===== LEFT PIPE EXECUTION DETAILS ===== left=(nil), right=(nil), redir=0x6313f6f47230, prev=(nil), next=0x6313f6f47230 [0]='echo' [1]='hi' >>[./outfiles/outfile01] >>[./outfiles/outfile02] Left stdout redirected to pipe write end Processing redirections ===== REDIRECTION CHAIN START ===== echo (pid=781473) >> [./outfiles/outfile01] stdin=0, stdout=1, stderr=2 './outfiles/outfile01' Current redirection_fd=-1, out_mode=0 ===== SETUP REDIRECTION START ===== Redirection type=>>, file='./outfiles/outfile01' Initial redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 Target command is 'echo' Updating last_out_redir './outfiles/outfile01' (len=20) No matching outer quotes found ===== OUTPUT REDIRECTION START ===== './outfiles/outfile01' stdout=1, redirection_fd=-1, out_mode=2 Using append mode Checking permissions for './outfiles/outfile01' ===== SETUP OUTPUT FILE START ===== './outfiles/outfile01' stdout=1, redirection_fd=-1 2 Using append mode Opening file './outfiles/outfile01' with mode 1089 Opened file with fd=3 Redirecting stdout to fd 3 stdout=1, redirection_fd=3 ===== SETUP OUTPUT FILE END (SUCCESS) ===== stdout=1, redirection_fd=3, out_mode=2 ===== OUTPUT REDIRECTION END (SUCCESS) ===== Final redirection_fd=3, out_mode=2 stdin=0, stdout=1, stderr=2 ===== SETUP REDIRECTION END (SUCCESS) ===== 0x6313f6f473c0 Next is >> [./outfiles/outfile02] './outfiles/outfile02' Current redirection_fd=3, out_mode=2 ===== SETUP REDIRECTION START ===== Redirection type=>>, file='./outfiles/outfile02' Initial redirection_fd=3, out_mode=2 stdin=0, stdout=1, stderr=2 Target command is 'echo' Updating last_out_redir './outfiles/outfile02' (len=20) No matching outer quotes found ===== OUTPUT REDIRECTION START ===== './outfiles/outfile02' stdout=1, redirection_fd=3, out_mode=2 Using append mode Closing previous fd 3 Checking permissions for './outfiles/outfile02' ===== SETUP OUTPUT FILE START ===== './outfiles/outfile02' stdout=1, redirection_fd=-1 2 Using append mode Opening file './outfiles/outfile02' with mode 1089 Opened file with fd=3 Redirecting stdout to fd 3 stdout=1, redirection_fd=3 ===== SETUP OUTPUT FILE END (SUCCESS) ===== stdout=1, redirection_fd=3, out_mode=2 ===== OUTPUT REDIRECTION END (SUCCESS) ===== Final redirection_fd=3, out_mode=2 stdin=0, stdout=1, stderr=2 ===== SETUP REDIRECTION END (SUCCESS) ===== (nil) stdin=0, stdout=1, stderr=2 Chain completed successfully ===== REDIRECTION CHAIN END ===== 'echo' 'hi' 0 Left child exited with status 0 Waiting for right child (pid=781474) ===== RIGHT PIPE EXECUTION DETAILS ===== left=(nil), right=(nil), redir=0x6313f6f473c0, prev=0x6313f6f47410, next=(nil) [0]='echo' [1]='bye' >>[./outfiles/outfile02] Stdin redirected from pipe read end Processing redirections ===== REDIRECTION CHAIN START ===== echo (pid=781474) >> [./outfiles/outfile02] stdin=0, stdout=1, stderr=2 './outfiles/outfile02' Current redirection_fd=-1, out_mode=0 ===== SETUP REDIRECTION START ===== Redirection type=>>, file='./outfiles/outfile02' Initial redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 Target command is 'echo' Updating last_out_redir './outfiles/outfile02' (len=20) No matching outer quotes found ===== OUTPUT REDIRECTION START ===== './outfiles/outfile02' stdout=1, redirection_fd=-1, out_mode=2 Using append mode Checking permissions for './outfiles/outfile02' ===== SETUP OUTPUT FILE START ===== './outfiles/outfile02' stdout=1, redirection_fd=-1 2 Using append mode Opening file './outfiles/outfile02' with mode 1089 Opened file with fd=3 Redirecting stdout to fd 3 stdout=1, redirection_fd=3 ===== SETUP OUTPUT FILE END (SUCCESS) ===== stdout=1, redirection_fd=3, out_mode=2 ===== OUTPUT REDIRECTION END (SUCCESS) ===== Final redirection_fd=3, out_mode=2 stdin=0, stdout=1, stderr=2 ===== SETUP REDIRECTION END (SUCCESS) ===== (nil) stdin=0, stdout=1, stderr=2 Chain completed successfully ===== REDIRECTION CHAIN END ===== 'echo' 'bye' 0 Right child exited with status 0 Pipe execution complete, returning status 0)
bash error = ()

Test 127: ❌ echo hi >>./test_files/invalid_permission >./outfiles/outfile01 | echo bye 
Only in ./mini_outfiles: outfile01
mini outfiles:
bye
bash outfiles:
cat: './bash_outfiles/*': No such file or directory
mini output = ()
bash output = (bye)
mini error = ( 'echo hi >>./test_files/invalid_permission >./outfiles/outfile01 | echo bye' 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=CMD, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing 'h' Handling regular token 'i' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='hi' Created node with args[0]='hi' Starting append_arg left=(nil), right=(nil), redir=(nil), prev=(nil), next=(nil) Adding arg='hi', quote_type=0 1 New args array created Freeing old arrays and assigning new ones left=(nil), right=(nil), redir=(nil), prev=(nil), next=(nil) Successfully appended argument 'echo'] -> NULL Position update indicated, continuing '>' Handling regular token Processing operator '>' at pos 8, type=>> Handling redirection type=>> Handling redirection token at pos 8 '>>' Looking for filename at position 10 Processing filename at pos 10 '.' '.' '/' 't' 'e' 's' 't' '_' 'f' 'i' 'l' 'e' 's' '/' 'i' 'n' 'v' 'a' 'l' 'i' 'd' '_' 'p' 'e' 'r' 'm' 'i' 's' 's' 'i' 'o' 'n' Extracted non-quoted filename from pos 10 to 40 './test_files/invalid_permission' '>>' './test_files/invalid_permission' Redirection token handled successfully Redirection operator='>>', filename='./test_files/invalid_permission' handle_redirection_token returned 1 Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing '>' Handling regular token Processing operator '>' at pos 42, type=> Handling redirection type=> Handling redirection token at pos 42 '>' Looking for filename at position 43 Processing filename at pos 43 '.' '.' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' 's' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' '0' '1' Extracted non-quoted filename from pos 43 to 62 './outfiles/outfile01' '>' './outfiles/outfile01' Redirection token handled successfully Redirection operator='>', filename='./outfiles/outfile01' handle_redirection_token returned 1 Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing '|' Handling regular token Processing operator '|' at pos 64, type=| Creating token type=|, content='|' Created node with args[0]='|' '|'] -> NULL Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing 'b' Handling regular token 'y' Handling regular token 'e' Handling regular token Creating token type=ARGS, content='bye' Created node with args[0]='bye' Starting append_arg left=(nil), right=(nil), redir=(nil), prev=0x5d897cd20f10, next=(nil) Adding arg='bye', quote_type=0 1 New args array created Freeing old arrays and assigning new ones left=(nil), right=(nil), redir=(nil), prev=0x5d897cd20f10, next=(nil) Successfully appended argument 'echo'] -> NULL Tokenization completed with result=1 'echo'] -> NULL Validating redirection targets Checking redirection node type=>>, filename='./test_files/invalid_permission' Checking redirection node type=>, filename='./outfiles/outfile01' All redirection targets valid ===== PROCESSING TOKEN LIST ===== left=(nil), right=(nil), redir=(nil), prev=(nil), next=0x5d897cd20d30 left=(nil), right=(nil), redir=(nil), prev=0x5d897cd20c40, next=0x5d897cd20ec0 left=(nil), right=(nil), redir=(nil), prev=0x5d897cd20d30, next=0x5d897cd20f10 left=(nil), right=(nil), redir=(nil), prev=0x5d897cd20ec0, next=0x5d897cd20fc0 left=(nil), right=(nil), redir=(nil), prev=0x5d897cd20f10, next=(nil) Found 2 commands left=(nil), right=(nil), redir=(nil), prev=(nil), next=0x5d897cd20d30 left=(nil), right=(nil), redir=(nil), prev=0x5d897cd20f10, next=(nil) ===== SETTING UP PIPE NODE ===== left=(nil), right=(nil), redir=(nil), prev=0x5d897cd20ec0, next=0x5d897cd20fc0 left=(nil), right=(nil), redir=(nil), prev=(nil), next=0x5d897cd20d30 left=(nil), right=(nil), redir=(nil), prev=0x5d897cd20f10, next=(nil) left=0x5d897cd20c40, right=0x5d897cd20fc0, redir=(nil), prev=0x5d897cd20ec0, next=0x5d897cd20fc0 left=0x5d897cd20c40, right=0x5d897cd20fc0, redir=(nil), prev=0x5d897cd20ec0, next=0x5d897cd20fc0 Building redirection AST 'echo' '>>' with filename './test_files/invalid_permission' Processing redirection type=>>, filename='./test_files/invalid_permission' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Checking for args after redirection './test_files/invalid_permission' Finished collecting args for command 'echo' Set redir_root to redirection with filename './test_files/invalid_permission' '>' with filename './outfiles/outfile01' Processing redirection type=>, filename='./outfiles/outfile01' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Linking >> redirection './test_files/invalid_permission' to > redirection './outfiles/outfile01' Checking for args after redirection './outfiles/outfile01' Finished collecting args for command 'echo' 'echo' Redirection AST build complete left=0x5d897cd20c40, right=(nil), redir=0x5d897cd20ec0, prev=0x5d897cd20c40, next=0x5d897cd20ec0 Using pipe_root as AST root ===== PIPE EXECUTION DETAILS ===== left=0x5d897cd20c40, right=0x5d897cd20fc0, redir=(nil), prev=0x5d897cd20ec0, next=0x5d897cd20fc0 left=(nil), right=(nil), redir=0x5d897cd20d30, prev=(nil), next=0x5d897cd20d30 left=(nil), right=(nil), redir=0x5d897cd20ec0, prev=0x5d897cd20f10, next=(nil) Created left child with pid=781705 Created right child with pid=781706 Parent closing pipe ends Waiting for left child (pid=781705) ===== RIGHT PIPE EXECUTION DETAILS ===== left=(nil), right=(nil), redir=0x5d897cd20ec0, prev=0x5d897cd20f10, next=(nil) [0]='echo' [1]='bye' >[./outfiles/outfile01] Stdin redirected from pipe read end Processing redirections ===== REDIRECTION CHAIN START ===== echo (pid=781706) > [./outfiles/outfile01] stdin=0, stdout=1, stderr=2 './outfiles/outfile01' ===== LEFT PIPE EXECUTION DETAILS ===== Current redirection_fd=-1, out_mode=0 ===== SETUP REDIRECTION START ===== Redirection type=>, file='./outfiles/outfile01' Initial redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 Target command is 'echo' Updating last_out_redir './outfiles/outfile01' (len=20) No matching outer quotes found ===== OUTPUT REDIRECTION START ===== './outfiles/outfile01' stdout=1, redirection_fd=-1, out_mode=1 Using truncate mode Checking permissions for './outfiles/outfile01' ===== SETUP OUTPUT FILE START ===== './outfiles/outfile01' stdout=1, redirection_fd=-1 1 Using truncate mode Opening file './outfiles/outfile01' with mode 577 left=(nil), right=(nil), redir=0x5d897cd20d30, prev=(nil), next=0x5d897cd20d30 [0]='echo' [1]='hi' >>[./test_files/invalid_permission] >[./outfiles/outfile01] Left stdout redirected to pipe write end Processing redirections ===== REDIRECTION CHAIN START ===== echo (pid=781705) >> [./test_files/invalid_permission] stdin=0, stdout=1, stderr=2 './test_files/invalid_permission' Current redirection_fd=-1, out_mode=0 ===== SETUP REDIRECTION START ===== Redirection type=>>, file='./test_files/invalid_permission' Initial redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 Target command is 'echo' Updating last_out_redir './test_files/invalid_permission' (len=31) No matching outer quotes found ===== OUTPUT REDIRECTION START ===== './test_files/invalid_permission' stdout=1, redirection_fd=-1, out_mode=2 Using append mode Checking permissions for './test_files/invalid_permission' Opened file with fd=3 Redirecting stdout to fd 3 stdout=1, redirection_fd=3 ===== SETUP OUTPUT FILE END (SUCCESS) ===== stdout=1, redirection_fd=3, out_mode=1 ===== OUTPUT REDIRECTION END (SUCCESS) ===== Final redirection_fd=3, out_mode=1 stdin=0, stdout=1, stderr=2 ===== SETUP REDIRECTION END (SUCCESS) ===== (nil) stdin=0, stdout=1, stderr=2 Chain completed successfully ===== REDIRECTION CHAIN END ===== 'echo' 'bye' 0 Permission denied Permission check failed ===== OUTPUT REDIRECTION END (FAILED) ===== Final redirection_fd=-1, out_mode=2 stdin=0, stdout=1, stderr=2 ===== SETUP REDIRECTION END (FAILED) ===== Redirection failed for file './test_files/invalid_permission' stdin=0, stdout=1 Error code=1 stdin=0, stdout=1, stderr=2 Chain failed ===== REDIRECTION CHAIN END ===== Redirection failed, writing empty output to pipe Left child exited with status 0 Waiting for right child (pid=781706) Right child exited with status 0 Pipe execution complete, returning status 0)
bash error = ( Permission denied)

Test 133: ❌ $PWD 
mini exit code = 2
bash exit code = 126
mini error = ( '$PWD' '$' Handling regular token Position update indicated, continuing Tokenization completed with result=1 '/home/bleow/Coding/Core/minishell/minishell_tester'] -> NULL Validating redirection targets All redirection targets valid ===== PROCESSING TOKEN LIST ===== left=(nil), right=(nil), redir=(nil), prev=(nil), next=(nil) Found 1 commands left=(nil), right=(nil), redir=(nil), prev=(nil), next=(nil) No pipe root created Building redirection AST '/home/bleow/Coding/Core/minishell/minishell_tester' Redirection AST build complete No redirection root created Using first command as AST root Is a directory)
bash error = ( Is a directory)

Test 134: ❌ $EMPTY 
mini exit code = 127
bash exit code = 0
mini error = ( '$EMPTY' '$' Handling regular token Position update indicated, continuing Tokenization completed with result=1 ''] -> NULL Validating redirection targets All redirection targets valid ===== PROCESSING TOKEN LIST ===== left=(nil), right=(nil), redir=(nil), prev=(nil), next=(nil) Found 1 commands left=(nil), right=(nil), redir=(nil), prev=(nil), next=(nil) No pipe root created Building redirection AST '' Redirection AST build complete No redirection root created Using first command as AST root Permission denied)
bash error = ()

Test 135: ❌ $EMPTY echo hi 
mini output = ()
bash output = (hi)
mini exit code = 127
bash exit code = 0
mini error = ( '$EMPTY echo hi' '$' Handling regular token Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='echo' Created node with args[0]='echo' Starting append_arg left=(nil), right=(nil), redir=(nil), prev=(nil), next=(nil) Adding arg='echo', quote_type=0 1 New args array created Freeing old arrays and assigning new ones left=(nil), right=(nil), redir=(nil), prev=(nil), next=(nil) Successfully appended argument ''] -> NULL Position update indicated, continuing 'h' Handling regular token 'i' Handling regular token Creating token type=ARGS, content='hi' Created node with args[0]='hi' Starting append_arg left=(nil), right=(nil), redir=(nil), prev=(nil), next=(nil) Adding arg='hi', quote_type=0 2 New args array created Freeing old arrays and assigning new ones left=(nil), right=(nil), redir=(nil), prev=(nil), next=(nil) Successfully appended argument ''] -> NULL Tokenization completed with result=1 ''] -> NULL Validating redirection targets All redirection targets valid ===== PROCESSING TOKEN LIST ===== left=(nil), right=(nil), redir=(nil), prev=(nil), next=(nil) Found 1 commands left=(nil), right=(nil), redir=(nil), prev=(nil), next=(nil) No pipe root created Building redirection AST '' Redirection AST build complete No redirection root created Using first command as AST root Permission denied)
bash error = ()

Test 136: ❌ ./test_files/invalid_permission 
mini exit code = 127
bash exit code = 126
mini error = ( './test_files/invalid_permission' '.' Handling regular token '/' Handling regular token 't' Handling regular token 'e' Handling regular token 's' Handling regular token 't' Handling regular token '_' Handling regular token 'f' Handling regular token 'i' Handling regular token 'l' Handling regular token 'e' Handling regular token 's' Handling regular token '/' Handling regular token 'i' Handling regular token 'n' Handling regular token 'v' Handling regular token 'a' Handling regular token 'l' Handling regular token 'i' Handling regular token 'd' Handling regular token '_' Handling regular token 'p' Handling regular token 'e' Handling regular token 'r' Handling regular token 'm' Handling regular token 'i' Handling regular token 's' Handling regular token 's' Handling regular token 'i' Handling regular token 'o' Handling regular token 'n' Handling regular token Creating token type=CMD, content='./test_files/invalid_permission' Created node with args[0]='./test_files/invalid_permission' './test_files/invalid_permission'] -> NULL Tokenization completed with result=1 './test_files/invalid_permission'] -> NULL Validating redirection targets All redirection targets valid ===== PROCESSING TOKEN LIST ===== left=(nil), right=(nil), redir=(nil), prev=(nil), next=(nil) Found 1 commands left=(nil), right=(nil), redir=(nil), prev=(nil), next=(nil) No pipe root created Building redirection AST './test_files/invalid_permission' Redirection AST build complete No redirection root created Using first command as AST root Permission denied)
bash error = ( Permission denied)

Test 141: ❌ ./test_files 
mini exit code = 2
bash exit code = 126
mini error = ( './test_files' '.' Handling regular token '/' Handling regular token 't' Handling regular token 'e' Handling regular token 's' Handling regular token 't' Handling regular token '_' Handling regular token 'f' Handling regular token 'i' Handling regular token 'l' Handling regular token 'e' Handling regular token 's' Handling regular token Creating token type=CMD, content='./test_files' Created node with args[0]='./test_files' './test_files'] -> NULL Tokenization completed with result=1 './test_files'] -> NULL Validating redirection targets All redirection targets valid ===== PROCESSING TOKEN LIST ===== left=(nil), right=(nil), redir=(nil), prev=(nil), next=(nil) Found 1 commands left=(nil), right=(nil), redir=(nil), prev=(nil), next=(nil) No pipe root created Building redirection AST './test_files' Redirection AST build complete No redirection root created Using first command as AST root Is a directory)
bash error = ( Is a directory)

134/146

