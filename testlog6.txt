Test  80: ❌ echo <123 <456 hi | echo 42 
mini output = ()
bash output = (42)
mini exit code = 1
bash exit code = 0
mini error = ( 'echo <123 <456 hi | echo 42' 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=CMD, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing '<' Handling regular token Processing operator '<' at pos 5, type=< Handling redirection type=< Handling redirection token at pos 5 '<' Looking for filename at position 6 Processing filename at pos 6 '1' '1' '2' '3' Extracted non-quoted filename from pos 6 to 8 '123' '<' '123' Redirection token handled successfully Redirection operator='<', filename='123' handle_redirection_token returned 1 Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing '<' Handling regular token Processing operator '<' at pos 10, type=< Handling redirection type=< Handling redirection token at pos 10 '<' Looking for filename at position 11 Processing filename at pos 11 '4' '4' '5' '6' Extracted non-quoted filename from pos 11 to 13 '456' '<' '456' Redirection token handled successfully Redirection operator='<', filename='456' handle_redirection_token returned 1 Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing 'h' Handling regular token 'i' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='hi' Created node with args[0]='hi' 'hi'] -> NULL Position update indicated, continuing '|' Handling regular token Processing operator '|' at pos 18, type=| Creating token type=|, content='|' Created node with args[0]='|' '|'] -> NULL Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing '4' Handling regular token '2' Handling regular token Creating token type=ARGS, content='42' Created node with args[0]='42' 'echo'] -> NULL Tokenization completed with result=1 'echo'] -> NULL Validating redirection targets Checking redirection node type=<, filename='123' Checking redirection node type=<, filename='456' All redirection targets valid Starting AST building Found 2 commands 'echo' 'echo' Pipe processing complete, pipe_root=0x5f3d2a87dd60 Building redirection AST 'echo' '<' with filename '123' Processing redirection type=<, filename='123' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Checking for args after redirection '123' Finished collecting args for command 'echo' Set redir_root to redirection with filename '123' '<' with filename '456' Processing redirection type=<, filename='456' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Linking < redirection '123' to < redirection '456' Checking for args after redirection '456' Found argument 'hi' to add to command 'echo' Finished collecting args for command 'echo' 'echo' Redirection AST build complete Redirection processing complete, redir_root=0x5f3d2a861f40 Built AST with root type=| Executing 'echo | echo' Created left child (pid=653643) ===== LEFT PIPE EXECUTION (PID=653643) ===== echo [echo] [hi] <[123] <[456] stdin=0, stdout=1, stderr=2 read=3, write=4 Closing read end (fd=3) Redirecting stdout to pipe write end (fd=4) Closing original pipe write end (fd=4) stdin=0, stdout=1, stderr=2 Processing redirection chain ===== REDIRECTION CHAIN START ===== echo (pid=653643) < [123] stdin=0, stdout=1, stderr=2 '123' Current redirection_fd=-1, out_mode=0 ===== SETUP REDIRECTION START ===== Redirection type=<, file='123' Initial redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 Target command is 'echo' Updating last_in_redir Created right child (pid=653644) '123' (len=3) No matching outer quotes found ===== INPUT REDIRECTION START ===== '123' stdin=0, redirection_fd=-1 Parent closing pipe ends Checking file access for '123' '123' Waiting for left child (pid=653643) File '123' not found No such file or directory File access check failed ===== INPUT REDIRECTION END (FAILED) ===== Final redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 ===== SETUP REDIRECTION END (FAILED) ===== Redirection failed for file '123' stdin=0, stdout=1 Error code=1 stdin=0, stdout=1, stderr=2 Chain failed ===== REDIRECTION CHAIN END ===== Redirection failed, status=0, error_code=1 stdin=0, stdout=1, stderr=2 Executing command 'echo' Command execution completed with result=0 Updating result to 1 due to redirection failure Exiting with status 1 Right child (pid=653644) for 'echo' <[456] Right stdin redirected from pipe read end Processing redirections for right cmd ===== REDIRECTION CHAIN START ===== echo (pid=653644) < [456] stdin=0, stdout=1, stderr=2 '456' Current redirection_fd=-1, out_mode=0 ===== SETUP REDIRECTION START ===== Redirection type=<, file='456' Initial redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 Target command is 'echo' Updating last_in_redir '456' (len=3) No matching outer quotes found ===== INPUT REDIRECTION START ===== '456' stdin=0, redirection_fd=-1 Checking file access for '456' '456' File '456' not found No such file or directory File access check failed ===== INPUT REDIRECTION END (FAILED) ===== Final redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 ===== SETUP REDIRECTION END (FAILED) ===== Redirection failed for file '456' stdin=0, stdout=1 Error code=1 stdin=0, stdout=1, stderr=2 Chain failed ===== REDIRECTION CHAIN END ===== Right cmd redirection failed, exiting with code 1 Left child exited with status 256 Waiting for right child (pid=653644) Right child exited with status 256 Pipe execution complete, returning status 1)
bash error = ( No such file or directory)

Test  92: ❌ echo hi >./outfiles/outfile01 >./outfiles/outfile02 | echo bye 
Files ./mini_outfiles/outfile02 and ./bash_outfiles/outfile02 differ
mini outfiles:
bye
bash outfiles:
hi
mini output = ()
bash output = (bye)
mini error = ( 'echo hi >./outfiles/outfile01 >./outfiles/outfile02 | echo bye' 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=CMD, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing 'h' Handling regular token 'i' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='hi' Created node with args[0]='hi' 'echo'] -> NULL Position update indicated, continuing '>' Handling regular token Processing operator '>' at pos 8, type=> Handling redirection type=> Handling redirection token at pos 8 '>' Looking for filename at position 9 Processing filename at pos 9 '.' '.' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' 's' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' '0' '1' Extracted non-quoted filename from pos 9 to 28 './outfiles/outfile01' '>' './outfiles/outfile01' Redirection token handled successfully Redirection operator='>', filename='./outfiles/outfile01' handle_redirection_token returned 1 Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing '>' Handling regular token Processing operator '>' at pos 30, type=> Handling redirection type=> Handling redirection token at pos 30 '>' Looking for filename at position 31 Processing filename at pos 31 '.' '.' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' 's' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' '0' '2' Extracted non-quoted filename from pos 31 to 50 './outfiles/outfile02' '>' './outfiles/outfile02' Redirection token handled successfully Redirection operator='>', filename='./outfiles/outfile02' handle_redirection_token returned 1 Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing '|' Handling regular token Processing operator '|' at pos 52, type=| Creating token type=|, content='|' Created node with args[0]='|' '|'] -> NULL Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing 'b' Handling regular token 'y' Handling regular token 'e' Handling regular token Creating token type=ARGS, content='bye' Created node with args[0]='bye' 'echo'] -> NULL Tokenization completed with result=1 'echo'] -> NULL Validating redirection targets Checking redirection node type=>, filename='./outfiles/outfile01' Checking redirection node type=>, filename='./outfiles/outfile02' All redirection targets valid Starting AST building Found 2 commands 'echo' 'echo' Pipe processing complete, pipe_root=0x5789116e5070 Building redirection AST 'echo' '>' with filename './outfiles/outfile01' Processing redirection type=>, filename='./outfiles/outfile01' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Checking for args after redirection './outfiles/outfile01' Finished collecting args for command 'echo' Set redir_root to redirection with filename './outfiles/outfile01' '>' with filename './outfiles/outfile02' Processing redirection type=>, filename='./outfiles/outfile02' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Linking > redirection './outfiles/outfile01' to > redirection './outfiles/outfile02' Checking for args after redirection './outfiles/outfile02' Finished collecting args for command 'echo' 'echo' Redirection AST build complete Redirection processing complete, redir_root=0x5789116e4e90 Built AST with root type=| Executing 'echo | echo' Created left child (pid=654131) Created right child (pid=654132) ===== LEFT PIPE EXECUTION (PID=654131) ===== echo Parent closing pipe ends Waiting for left child (pid=654131) [echo] [hi] >[./outfiles/outfile01] >[./outfiles/outfile02] stdin=0, stdout=1, stderr=2 read=3, write=4 Closing read end (fd=3) Redirecting stdout to pipe write end (fd=4) Closing original pipe write end (fd=4) stdin=0, stdout=1, stderr=2 Processing redirection chain ===== REDIRECTION CHAIN START ===== echo (pid=654131) > [./outfiles/outfile01] stdin=0, stdout=1, stderr=2 './outfiles/outfile01' Current redirection_fd=-1, out_mode=0 ===== SETUP REDIRECTION START ===== Redirection type=>, file='./outfiles/outfile01' Initial redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 Target command is 'echo' Updating last_out_redir './outfiles/outfile01' (len=20) No matching outer quotes found ===== OUTPUT REDIRECTION START ===== './outfiles/outfile01' stdout=1, redirection_fd=-1, out_mode=1 Using truncate mode Checking permissions for './outfiles/outfile01' ===== SETUP OUTPUT FILE START ===== './outfiles/outfile01' stdout=1, redirection_fd=-1 1 Using truncate mode Opening file './outfiles/outfile01' with mode 577 Right child (pid=654132) for 'echo' >[./outfiles/outfile02] Right stdin redirected from pipe read end Processing redirections for right cmd ===== REDIRECTION CHAIN START ===== echo (pid=654132) > [./outfiles/outfile02] stdin=0, stdout=1, stderr=2 './outfiles/outfile02' Current redirection_fd=-1, out_mode=0 ===== SETUP REDIRECTION START ===== Redirection type=>, file='./outfiles/outfile02' Initial redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 Opened file with fd=3 Redirecting stdout to fd 3 Target command is 'echo' Updating last_out_redir stdout=1, redirection_fd=3 ===== SETUP OUTPUT FILE END (SUCCESS) ===== stdout=1, redirection_fd=3, out_mode=1 ===== OUTPUT REDIRECTION END (SUCCESS) ===== Final redirection_fd=3, out_mode=1 './outfiles/outfile02' (len=20) No matching outer quotes found stdin=0, stdout=1, stderr=2 ===== OUTPUT REDIRECTION START ===== ===== SETUP REDIRECTION END (SUCCESS) ===== './outfiles/outfile02' 0x5789116e5020 stdout=1, redirection_fd=-1, out_mode=1 Next is > [./outfiles/outfile02] Using truncate mode './outfiles/outfile02' Checking permissions for './outfiles/outfile02' Current redirection_fd=3, out_mode=1 ===== SETUP REDIRECTION START ===== Redirection type=>, file='./outfiles/outfile02' Initial redirection_fd=3, out_mode=1 stdin=0, stdout=1, stderr=2 Target command is 'echo' Updating last_out_redir ===== SETUP OUTPUT FILE START ===== './outfiles/outfile02' (len=20) './outfiles/outfile02' No matching outer quotes found ===== OUTPUT REDIRECTION START ===== stdout=1, redirection_fd=-1 './outfiles/outfile02' 1 stdout=1, redirection_fd=3, out_mode=1 Using truncate mode Using truncate mode Opening file './outfiles/outfile02' with mode 577 Closing previous fd 3 Checking permissions for './outfiles/outfile02' ===== SETUP OUTPUT FILE START ===== './outfiles/outfile02' stdout=1, redirection_fd=-1 1 Using truncate mode Opening file './outfiles/outfile02' with mode 577 Opened file with fd=3 Redirecting stdout to fd 3 stdout=1, redirection_fd=3 ===== SETUP OUTPUT FILE END (SUCCESS) ===== stdout=1, redirection_fd=3, out_mode=1 ===== OUTPUT REDIRECTION END (SUCCESS) ===== Final redirection_fd=3, out_mode=1 stdin=0, stdout=1, stderr=2 ===== SETUP REDIRECTION END (SUCCESS) ===== (nil) Opened file with fd=3 Redirecting stdout to fd 3 stdin=0, stdout=1, stderr=2 Chain completed successfully ===== REDIRECTION CHAIN END ===== echo stdout=1, redirection_fd=3 ===== SETUP OUTPUT FILE END (SUCCESS) ===== stdout=1, redirection_fd=3, out_mode=1 ===== OUTPUT REDIRECTION END (SUCCESS) ===== Final redirection_fd=3, out_mode=1 stdin=0, stdout=1, stderr=2 ===== SETUP REDIRECTION END (SUCCESS) ===== (nil) stdin=0, stdout=1, stderr=2 Chain completed successfully ===== REDIRECTION CHAIN END ===== stdin=0, stdout=1, stderr=2 Executing command 'echo' Command execution completed with result=0 Exiting with status 0 0 Left child exited with status 0 Waiting for right child (pid=654132) Right child exited with status 0 Pipe execution complete, returning status 0)
bash error = ()

Test  96: ❌ echo hi >./outfiles/outfile01 >./test_files/invalid_permission | echo bye 
Files ./mini_outfiles/outfile01 and ./bash_outfiles/outfile01 differ
mini outfiles:
hi
bash outfiles:
mini output = ()
bash output = (bye)
mini exit code = 1
bash exit code = 0
mini error = ( 'echo hi >./outfiles/outfile01 >./test_files/invalid_permission | echo bye' 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=CMD, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing 'h' Handling regular token 'i' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='hi' Created node with args[0]='hi' 'echo'] -> NULL Position update indicated, continuing '>' Handling regular token Processing operator '>' at pos 8, type=> Handling redirection type=> Handling redirection token at pos 8 '>' Looking for filename at position 9 Processing filename at pos 9 '.' '.' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' 's' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' '0' '1' Extracted non-quoted filename from pos 9 to 28 './outfiles/outfile01' '>' './outfiles/outfile01' Redirection token handled successfully Redirection operator='>', filename='./outfiles/outfile01' handle_redirection_token returned 1 Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing '>' Handling regular token Processing operator '>' at pos 30, type=> Handling redirection type=> Handling redirection token at pos 30 '>' Looking for filename at position 31 Processing filename at pos 31 '.' '.' '/' 't' 'e' 's' 't' '_' 'f' 'i' 'l' 'e' 's' '/' 'i' 'n' 'v' 'a' 'l' 'i' 'd' '_' 'p' 'e' 'r' 'm' 'i' 's' 's' 'i' 'o' 'n' Extracted non-quoted filename from pos 31 to 61 './test_files/invalid_permission' '>' './test_files/invalid_permission' Redirection token handled successfully Redirection operator='>', filename='./test_files/invalid_permission' handle_redirection_token returned 1 Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing '|' Handling regular token Processing operator '|' at pos 63, type=| Creating token type=|, content='|' Created node with args[0]='|' '|'] -> NULL Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing 'b' Handling regular token 'y' Handling regular token 'e' Handling regular token Creating token type=ARGS, content='bye' Created node with args[0]='bye' 'echo'] -> NULL Tokenization completed with result=1 'echo'] -> NULL Validating redirection targets Checking redirection node type=>, filename='./outfiles/outfile01' Checking redirection node type=>, filename='./test_files/invalid_permission' All redirection targets valid Starting AST building Found 2 commands 'echo' 'echo' Pipe processing complete, pipe_root=0x5d13c9e97e80 Building redirection AST 'echo' '>' with filename './outfiles/outfile01' Processing redirection type=>, filename='./outfiles/outfile01' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Checking for args after redirection './outfiles/outfile01' Finished collecting args for command 'echo' Set redir_root to redirection with filename './outfiles/outfile01' '>' with filename './test_files/invalid_permission' Processing redirection type=>, filename='./test_files/invalid_permission' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Linking > redirection './outfiles/outfile01' to > redirection './test_files/invalid_permission' Checking for args after redirection './test_files/invalid_permission' Finished collecting args for command 'echo' 'echo' Redirection AST build complete Redirection processing complete, redir_root=0x5d13c9e97ca0 Built AST with root type=| Executing 'echo | echo' Created left child (pid=654317) ===== LEFT PIPE EXECUTION (PID=654317) ===== echo [echo] [hi] >[./outfiles/outfile01] >[./test_files/invalid_permission] stdin=0, stdout=1, stderr=2 read=3, write=4 Closing read end (fd=3) Redirecting stdout to pipe write end (fd=4) Closing original pipe write end (fd=4) stdin=0, stdout=1, stderr=2 Processing redirection chain ===== REDIRECTION CHAIN START ===== echo (pid=654317) > [./outfiles/outfile01] stdin=0, stdout=1, stderr=2 './outfiles/outfile01' Current redirection_fd=-1, out_mode=0 ===== SETUP REDIRECTION START ===== Redirection type=>, file='./outfiles/outfile01' Initial redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 Target command is 'echo' Updating last_out_redir './outfiles/outfile01' (len=20) No matching outer quotes found ===== OUTPUT REDIRECTION START ===== './outfiles/outfile01' stdout=1, redirection_fd=-1, out_mode=1 Using truncate mode Checking permissions for './outfiles/outfile01' ===== SETUP OUTPUT FILE START ===== './outfiles/outfile01' stdout=1, redirection_fd=-1 1 Using truncate mode Opening file './outfiles/outfile01' with mode 577 Opened file with fd=3 Redirecting stdout to fd 3 stdout=1, redirection_fd=3 ===== SETUP OUTPUT FILE END (SUCCESS) ===== stdout=1, redirection_fd=3, out_mode=1 ===== OUTPUT REDIRECTION END (SUCCESS) ===== Final redirection_fd=3, out_mode=1 stdin=0, stdout=1, stderr=2 ===== SETUP REDIRECTION END (SUCCESS) ===== 0x5d13c9e97e30 Next is > [./test_files/invalid_permission] './test_files/invalid_permission' Current redirection_fd=3, out_mode=1 ===== SETUP REDIRECTION START ===== Redirection type=>, file='./test_files/invalid_permission' Initial redirection_fd=3, out_mode=1 stdin=0, stdout=1, stderr=2 Target command is 'echo' Updating last_out_redir './test_files/invalid_permission' (len=31) No matching outer quotes found ===== OUTPUT REDIRECTION START ===== './test_files/invalid_permission' stdout=1, redirection_fd=3, out_mode=1 Using truncate mode Closing previous fd 3 Checking permissions for './test_files/invalid_permission' Permission denied Permission check failed ===== OUTPUT REDIRECTION END (FAILED) ===== Final redirection_fd=-1, out_mode=1 stdin=0, stdout=1, stderr=2 ===== SETUP REDIRECTION END (FAILED) ===== Redirection failed for file './test_files/invalid_permission' stdin=0, stdout=1 Error code=1 stdin=0, stdout=1, stderr=2 Chain failed ===== REDIRECTION CHAIN END ===== Redirection failed, status=0, error_code=1 stdin=0, stdout=1, stderr=2 Executing command 'echo' Command execution completed with result=0 Updating result to 1 due to redirection failure Exiting with status 1 Created right child (pid=654318) Parent closing pipe ends Waiting for left child (pid=654317) Left child exited with status 256 Waiting for right child (pid=654318) Right child (pid=654318) for 'echo' >[./test_files/invalid_permission] Right stdin redirected from pipe read end Processing redirections for right cmd ===== REDIRECTION CHAIN START ===== echo (pid=654318) > [./test_files/invalid_permission] stdin=0, stdout=1, stderr=2 './test_files/invalid_permission' Current redirection_fd=-1, out_mode=0 ===== SETUP REDIRECTION START ===== Redirection type=>, file='./test_files/invalid_permission' Initial redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 Target command is 'echo' Updating last_out_redir './test_files/invalid_permission' (len=31) No matching outer quotes found ===== OUTPUT REDIRECTION START ===== './test_files/invalid_permission' stdout=1, redirection_fd=-1, out_mode=1 Using truncate mode Checking permissions for './test_files/invalid_permission' Permission denied Permission check failed ===== OUTPUT REDIRECTION END (FAILED) ===== Final redirection_fd=-1, out_mode=1 stdin=0, stdout=1, stderr=2 ===== SETUP REDIRECTION END (FAILED) ===== Redirection failed for file './test_files/invalid_permission' stdin=0, stdout=1 Error code=1 stdin=0, stdout=1, stderr=2 Chain failed ===== REDIRECTION CHAIN END ===== Right cmd redirection failed, exiting with code 1 Right child exited with status 256 Pipe execution complete, returning status 1)
bash error = ( Permission denied)

Test  98: ❌ echo hi >./test_files/invalid_permission >./outfiles/outfile01 | echo bye 
Only in ./mini_outfiles: outfile01
mini outfiles:
bye
bash outfiles:
cat: './bash_outfiles/*': No such file or directory
mini output = ()
bash output = (bye)
mini error = ( 'echo hi >./test_files/invalid_permission >./outfiles/outfile01 | echo bye' 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=CMD, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing 'h' Handling regular token 'i' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='hi' Created node with args[0]='hi' 'echo'] -> NULL Position update indicated, continuing '>' Handling regular token Processing operator '>' at pos 8, type=> Handling redirection type=> Handling redirection token at pos 8 '>' Looking for filename at position 9 Processing filename at pos 9 '.' '.' '/' 't' 'e' 's' 't' '_' 'f' 'i' 'l' 'e' 's' '/' 'i' 'n' 'v' 'a' 'l' 'i' 'd' '_' 'p' 'e' 'r' 'm' 'i' 's' 's' 'i' 'o' 'n' Extracted non-quoted filename from pos 9 to 39 './test_files/invalid_permission' '>' './test_files/invalid_permission' Redirection token handled successfully Redirection operator='>', filename='./test_files/invalid_permission' handle_redirection_token returned 1 Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing '>' Handling regular token Processing operator '>' at pos 41, type=> Handling redirection type=> Handling redirection token at pos 41 '>' Looking for filename at position 42 Processing filename at pos 42 '.' '.' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' 's' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' '0' '1' Extracted non-quoted filename from pos 42 to 61 './outfiles/outfile01' '>' './outfiles/outfile01' Redirection token handled successfully Redirection operator='>', filename='./outfiles/outfile01' handle_redirection_token returned 1 Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing '|' Handling regular token Processing operator '|' at pos 63, type=| Creating token type=|, content='|' Created node with args[0]='|' '|'] -> NULL Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing 'b' Handling regular token 'y' Handling regular token 'e' Handling regular token Creating token type=ARGS, content='bye' Created node with args[0]='bye' 'echo'] -> NULL Tokenization completed with result=1 'echo'] -> NULL Validating redirection targets Checking redirection node type=>, filename='./test_files/invalid_permission' Checking redirection node type=>, filename='./outfiles/outfile01' All redirection targets valid Starting AST building Found 2 commands 'echo' 'echo' Pipe processing complete, pipe_root=0x595ddf4274f0 Building redirection AST 'echo' '>' with filename './test_files/invalid_permission' Processing redirection type=>, filename='./test_files/invalid_permission' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Checking for args after redirection './test_files/invalid_permission' Finished collecting args for command 'echo' Set redir_root to redirection with filename './test_files/invalid_permission' '>' with filename './outfiles/outfile01' Processing redirection type=>, filename='./outfiles/outfile01' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Linking > redirection './test_files/invalid_permission' to > redirection './outfiles/outfile01' Checking for args after redirection './outfiles/outfile01' Finished collecting args for command 'echo' 'echo' Redirection AST build complete Redirection processing complete, redir_root=0x595ddf427310 Built AST with root type=| Executing 'echo | echo' Created left child (pid=654411) Created right child (pid=654412) Parent closing pipe ends Waiting for left child (pid=654411) ===== LEFT PIPE EXECUTION (PID=654411) ===== echo Right child (pid=654412) for 'echo' [echo] [hi] >[./outfiles/outfile01] >[./test_files/invalid_permission] Right stdin redirected from pipe read end Processing redirections for right cmd ===== REDIRECTION CHAIN START ===== echo (pid=654412) > [./outfiles/outfile01] stdin=0, stdout=1, stderr=2 read=3, write=4 stdin=0, stdout=1, stderr=2 Closing read end (fd=3) './outfiles/outfile01' Redirecting stdout to pipe write end (fd=4) Current redirection_fd=-1, out_mode=0 Closing original pipe write end (fd=4) ===== SETUP REDIRECTION START ===== Redirection type=>, file='./outfiles/outfile01' stdin=0, stdout=1, stderr=2 Initial redirection_fd=-1, out_mode=0 Processing redirection chain ===== REDIRECTION CHAIN START ===== stdin=0, stdout=1, stderr=2 echo (pid=654411) > [./test_files/invalid_permission] stdin=0, stdout=1, stderr=2 './test_files/invalid_permission' Current redirection_fd=-1, out_mode=0 ===== SETUP REDIRECTION START ===== Target command is 'echo' Redirection type=>, file='./test_files/invalid_permission' Updating last_out_redir Initial redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 './outfiles/outfile01' (len=20) No matching outer quotes found ===== OUTPUT REDIRECTION START ===== './outfiles/outfile01' stdout=1, redirection_fd=-1, out_mode=1 Using truncate mode Target command is 'echo' Checking permissions for './outfiles/outfile01' Updating last_out_redir './test_files/invalid_permission' (len=31) ===== SETUP OUTPUT FILE START ===== No matching outer quotes found './outfiles/outfile01' ===== OUTPUT REDIRECTION START ===== stdout=1, redirection_fd=-1 './test_files/invalid_permission' 1 Using truncate mode stdout=1, redirection_fd=-1, out_mode=1 Opening file './outfiles/outfile01' with mode 577 Using truncate mode Checking permissions for './test_files/invalid_permission' Permission denied Permission check failed ===== OUTPUT REDIRECTION END (FAILED) ===== Final redirection_fd=-1, out_mode=1 stdin=0, stdout=1, stderr=2 ===== SETUP REDIRECTION END (FAILED) ===== Redirection failed for file './test_files/invalid_permission' stdin=0, stdout=1 Error code=1 stdin=0, stdout=1, stderr=2 Chain failed ===== REDIRECTION CHAIN END ===== Redirection failed, status=0, error_code=1 stdin=0, stdout=1, stderr=2 Executing command 'echo' Opened file with fd=3 Redirecting stdout to fd 3 stdout=1, redirection_fd=3 ===== SETUP OUTPUT FILE END (SUCCESS) ===== stdout=1, redirection_fd=3, out_mode=1 ===== OUTPUT REDIRECTION END (SUCCESS) ===== Final redirection_fd=3, out_mode=1 stdin=0, stdout=1, stderr=2 ===== SETUP REDIRECTION END (SUCCESS) ===== (nil) stdin=0, stdout=1, stderr=2 Chain completed successfully ===== REDIRECTION CHAIN END ===== echo 0 Command execution completed with result=0 Updating result to 1 due to redirection failure Exiting with status 1 Left child exited with status 256 Waiting for right child (pid=654412) Right child exited with status 0 Pipe execution complete, returning status 0)
bash error = ( Permission denied)

Test 100: ❌ echo hi | >./outfiles/outfile01 echo bye >./test_files/invalid_permission 
Only in ./bash_outfiles: outfile01
mini outfiles:
cat: './mini_outfiles/*': No such file or directory
bash outfiles:
mini error = ( 'echo hi | >./outfiles/outfile01 echo bye >./test_files/invalid_permission' 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=CMD, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing 'h' Handling regular token 'i' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='hi' Created node with args[0]='hi' 'echo'] -> NULL Position update indicated, continuing '|' Handling regular token Processing operator '|' at pos 8, type=| Creating token type=|, content='|' Created node with args[0]='|' '|'] -> NULL Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing '>' Handling regular token Processing operator '>' at pos 10, type=> Handling redirection type=> Handling redirection token at pos 10 '>' Looking for filename at position 11 Processing filename at pos 11 '.' '.' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' 's' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' '0' '1' Extracted non-quoted filename from pos 11 to 30 './outfiles/outfile01' '>' './outfiles/outfile01' Redirection token handled successfully Redirection operator='>', filename='./outfiles/outfile01' handle_redirection_token returned 1 Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing 'b' Handling regular token 'y' Handling regular token 'e' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='bye' Created node with args[0]='bye' 'bye'] -> NULL Position update indicated, continuing '>' Handling regular token Processing operator '>' at pos 41, type=> Handling redirection type=> Handling redirection token at pos 41 '>' Looking for filename at position 42 Processing filename at pos 42 '.' '.' '/' 't' 'e' 's' 't' '_' 'f' 'i' 'l' 'e' 's' '/' 'i' 'n' 'v' 'a' 'l' 'i' 'd' '_' 'p' 'e' 'r' 'm' 'i' 's' 's' 'i' 'o' 'n' Extracted non-quoted filename from pos 42 to 72 './test_files/invalid_permission' '>' './test_files/invalid_permission' Redirection token handled successfully Redirection operator='>', filename='./test_files/invalid_permission' handle_redirection_token returned 1 Position update indicated, continuing Tokenization completed with result=1 './test_files/invalid_permission'] -> NULL Validating redirection targets Checking redirection node type=>, filename='./outfiles/outfile01' Checking redirection node type=>, filename='./test_files/invalid_permission' All redirection targets valid Starting AST building Found 1 commands 'echo' Pipe processing complete, pipe_root=(nil) Building redirection AST 'echo' '>' with filename './outfiles/outfile01' Processing redirection type=>, filename='./outfiles/outfile01' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Checking for args after redirection './outfiles/outfile01' Found argument 'echo' to add to command 'echo' Found argument 'bye' to add to command 'echo' Finished collecting args for command 'echo' Set redir_root to redirection with filename './outfiles/outfile01' '>' with filename './test_files/invalid_permission' Processing redirection type=>, filename='./test_files/invalid_permission' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Linking > redirection './outfiles/outfile01' to > redirection './test_files/invalid_permission' Checking for args after redirection './test_files/invalid_permission' Finished collecting args for command 'echo' Redirection AST build complete Redirection processing complete, redir_root=0x600c07f9cdb0 Built AST with root type=> './outfiles/outfile01' ===== REDIRECTION CHAIN START ===== echo (pid=654499) > [./outfiles/outfile01] stdin=0, stdout=1, stderr=2 './outfiles/outfile01' Current redirection_fd=-1, out_mode=0 ===== SETUP REDIRECTION START ===== Redirection type=>, file='./outfiles/outfile01' Initial redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 No target command found ===== SETUP REDIRECTION END (FAILED) ===== Redirection failed for file './outfiles/outfile01' stdin=0, stdout=1 Error code=1 stdin=0, stdout=1, stderr=2 Chain failed ===== REDIRECTION CHAIN END ===== err=1)
bash error = ( Permission denied)

Test 122: ❌ echo hi >>./outfiles/outfile01 >>./outfiles/outfile02 | echo bye 
Files ./mini_outfiles/outfile02 and ./bash_outfiles/outfile02 differ
mini outfiles:
bye
hi
bash outfiles:
hi
mini output = ()
bash output = (bye)
mini error = ( 'echo hi >>./outfiles/outfile01 >>./outfiles/outfile02 | echo bye' 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=CMD, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing 'h' Handling regular token 'i' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='hi' Created node with args[0]='hi' 'echo'] -> NULL Position update indicated, continuing '>' Handling regular token Processing operator '>' at pos 8, type=>> Handling redirection type=>> Handling redirection token at pos 8 '>>' Looking for filename at position 10 Processing filename at pos 10 '.' '.' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' 's' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' '0' '1' Extracted non-quoted filename from pos 10 to 29 './outfiles/outfile01' '>>' './outfiles/outfile01' Redirection token handled successfully Redirection operator='>>', filename='./outfiles/outfile01' handle_redirection_token returned 1 Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing '>' Handling regular token Processing operator '>' at pos 31, type=>> Handling redirection type=>> Handling redirection token at pos 31 '>>' Looking for filename at position 33 Processing filename at pos 33 '.' '.' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' 's' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' '0' '2' Extracted non-quoted filename from pos 33 to 52 './outfiles/outfile02' '>>' './outfiles/outfile02' Redirection token handled successfully Redirection operator='>>', filename='./outfiles/outfile02' handle_redirection_token returned 1 Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing '|' Handling regular token Processing operator '|' at pos 54, type=| Creating token type=|, content='|' Created node with args[0]='|' '|'] -> NULL Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing 'b' Handling regular token 'y' Handling regular token 'e' Handling regular token Creating token type=ARGS, content='bye' Created node with args[0]='bye' 'echo'] -> NULL Tokenization completed with result=1 'echo'] -> NULL Validating redirection targets Checking redirection node type=>>, filename='./outfiles/outfile01' Checking redirection node type=>>, filename='./outfiles/outfile02' All redirection targets valid Starting AST building Found 2 commands 'echo' 'echo' Pipe processing complete, pipe_root=0x5bc5708c5410 Building redirection AST 'echo' '>>' with filename './outfiles/outfile01' Processing redirection type=>>, filename='./outfiles/outfile01' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Checking for args after redirection './outfiles/outfile01' Finished collecting args for command 'echo' Set redir_root to redirection with filename './outfiles/outfile01' '>>' with filename './outfiles/outfile02' Processing redirection type=>>, filename='./outfiles/outfile02' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Linking >> redirection './outfiles/outfile01' to >> redirection './outfiles/outfile02' Checking for args after redirection './outfiles/outfile02' Finished collecting args for command 'echo' 'echo' Redirection AST build complete Redirection processing complete, redir_root=0x5bc5708c5230 Built AST with root type=| Executing 'echo | echo' Created left child (pid=655379) Created right child (pid=655380) Parent closing pipe ends Waiting for left child (pid=655379) Right child (pid=655380) for 'echo' >>[./outfiles/outfile02] Right stdin redirected from pipe read end Processing redirections for right cmd ===== REDIRECTION CHAIN START ===== echo (pid=655380) >> [./outfiles/outfile02] stdin=0, stdout=1, stderr=2 './outfiles/outfile02' Current redirection_fd=-1, out_mode=0 ===== SETUP REDIRECTION START ===== Redirection type=>>, file='./outfiles/outfile02' Initial redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 Target command is 'echo' Updating last_out_redir './outfiles/outfile02' (len=20) No matching outer quotes found ===== OUTPUT REDIRECTION START ===== './outfiles/outfile02' stdout=1, redirection_fd=-1, out_mode=2 Using append mode Checking permissions for './outfiles/outfile02' ===== SETUP OUTPUT FILE START ===== './outfiles/outfile02' stdout=1, redirection_fd=-1 2 Using append mode Opening file './outfiles/outfile02' with mode 1089 Opened file with fd=3 Redirecting stdout to fd 3 stdout=1, redirection_fd=3 ===== SETUP OUTPUT FILE END (SUCCESS) ===== stdout=1, redirection_fd=3, out_mode=2 ===== OUTPUT REDIRECTION END (SUCCESS) ===== Final redirection_fd=3, out_mode=2 stdin=0, stdout=1, stderr=2 ===== SETUP REDIRECTION END (SUCCESS) ===== (nil) stdin=0, stdout=1, stderr=2 Chain completed successfully ===== REDIRECTION CHAIN END ===== ===== LEFT PIPE EXECUTION (PID=655379) ===== echo echo [echo] [hi] >>[./outfiles/outfile01] >>[./outfiles/outfile02] stdin=0, stdout=1, stderr=2 read=3, write=4 Closing read end (fd=3) Redirecting stdout to pipe write end (fd=4) Closing original pipe write end (fd=4) stdin=0, stdout=1, stderr=2 Processing redirection chain ===== REDIRECTION CHAIN START ===== echo (pid=655379) >> [./outfiles/outfile01] stdin=0, stdout=1, stderr=2 './outfiles/outfile01' Current redirection_fd=-1, out_mode=0 ===== SETUP REDIRECTION START ===== Redirection type=>>, file='./outfiles/outfile01' Initial redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 Target command is 'echo' Updating last_out_redir './outfiles/outfile01' (len=20) No matching outer quotes found ===== OUTPUT REDIRECTION START ===== './outfiles/outfile01' stdout=1, redirection_fd=-1, out_mode=2 Using append mode Checking permissions for './outfiles/outfile01' ===== SETUP OUTPUT FILE START ===== './outfiles/outfile01' stdout=1, redirection_fd=-1 2 Using append mode Opening file './outfiles/outfile01' with mode 1089 Opened file with fd=3 Redirecting stdout to fd 3 stdout=1, redirection_fd=3 ===== SETUP OUTPUT FILE END (SUCCESS) ===== stdout=1, redirection_fd=3, out_mode=2 ===== OUTPUT REDIRECTION END (SUCCESS) ===== Final redirection_fd=3, out_mode=2 stdin=0, stdout=1, stderr=2 ===== SETUP REDIRECTION END (SUCCESS) ===== 0x5bc5708c53c0 Next is >> [./outfiles/outfile02] './outfiles/outfile02' Current redirection_fd=3, out_mode=2 ===== SETUP REDIRECTION START ===== Redirection type=>>, file='./outfiles/outfile02' Initial redirection_fd=3, out_mode=2 stdin=0, stdout=1, stderr=2 Target command is 'echo' Updating last_out_redir './outfiles/outfile02' (len=20) No matching outer quotes found ===== OUTPUT REDIRECTION START ===== './outfiles/outfile02' stdout=1, redirection_fd=3, out_mode=2 Using append mode Closing previous fd 3 Checking permissions for './outfiles/outfile02' ===== SETUP OUTPUT FILE START ===== './outfiles/outfile02' stdout=1, redirection_fd=-1 2 Using append mode Opening file './outfiles/outfile02' with mode 1089 Opened file with fd=3 Redirecting stdout to fd 3 stdout=1, redirection_fd=3 ===== SETUP OUTPUT FILE END (SUCCESS) ===== stdout=1, redirection_fd=3, out_mode=2 ===== OUTPUT REDIRECTION END (SUCCESS) ===== Final redirection_fd=3, out_mode=2 stdin=0, stdout=1, stderr=2 ===== SETUP REDIRECTION END (SUCCESS) ===== (nil) stdin=0, stdout=1, stderr=2 Chain completed successfully ===== REDIRECTION CHAIN END ===== stdin=0, stdout=1, stderr=2 Executing command 'echo' Command execution completed with result=0 Exiting with status 0 Left child exited with status 0 Waiting for right child (pid=655380) 0 Right child exited with status 0 Pipe execution complete, returning status 0)
bash error = ()

Test 127: ❌ echo hi >>./test_files/invalid_permission >./outfiles/outfile01 | echo bye 
Only in ./mini_outfiles: outfile01
mini outfiles:
bye
bash outfiles:
cat: './bash_outfiles/*': No such file or directory
mini output = ()
bash output = (bye)
mini error = ( 'echo hi >>./test_files/invalid_permission >./outfiles/outfile01 | echo bye' 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=CMD, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing 'h' Handling regular token 'i' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='hi' Created node with args[0]='hi' 'echo'] -> NULL Position update indicated, continuing '>' Handling regular token Processing operator '>' at pos 8, type=>> Handling redirection type=>> Handling redirection token at pos 8 '>>' Looking for filename at position 10 Processing filename at pos 10 '.' '.' '/' 't' 'e' 's' 't' '_' 'f' 'i' 'l' 'e' 's' '/' 'i' 'n' 'v' 'a' 'l' 'i' 'd' '_' 'p' 'e' 'r' 'm' 'i' 's' 's' 'i' 'o' 'n' Extracted non-quoted filename from pos 10 to 40 './test_files/invalid_permission' '>>' './test_files/invalid_permission' Redirection token handled successfully Redirection operator='>>', filename='./test_files/invalid_permission' handle_redirection_token returned 1 Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing '>' Handling regular token Processing operator '>' at pos 42, type=> Handling redirection type=> Handling redirection token at pos 42 '>' Looking for filename at position 43 Processing filename at pos 43 '.' '.' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' 's' '/' 'o' 'u' 't' 'f' 'i' 'l' 'e' '0' '1' Extracted non-quoted filename from pos 43 to 62 './outfiles/outfile01' '>' './outfiles/outfile01' Redirection token handled successfully Redirection operator='>', filename='./outfiles/outfile01' handle_redirection_token returned 1 Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing '|' Handling regular token Processing operator '|' at pos 64, type=| Creating token type=|, content='|' Created node with args[0]='|' '|'] -> NULL Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='echo' Created node with args[0]='echo' 'echo'] -> NULL Position update indicated, continuing 'b' Handling regular token 'y' Handling regular token 'e' Handling regular token Creating token type=ARGS, content='bye' Created node with args[0]='bye' 'echo'] -> NULL Tokenization completed with result=1 'echo'] -> NULL Validating redirection targets Checking redirection node type=>>, filename='./test_files/invalid_permission' Checking redirection node type=>, filename='./outfiles/outfile01' All redirection targets valid Starting AST building Found 2 commands 'echo' 'echo' Pipe processing complete, pipe_root=0x60a8d9696f10 Building redirection AST 'echo' '>>' with filename './test_files/invalid_permission' Processing redirection type=>>, filename='./test_files/invalid_permission' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Checking for args after redirection './test_files/invalid_permission' Finished collecting args for command 'echo' Set redir_root to redirection with filename './test_files/invalid_permission' '>' with filename './outfiles/outfile01' Processing redirection type=>, filename='./outfiles/outfile01' Target command is 'echo' Set left pointer to command 'echo' Linking previous redirections for command 'echo' Linking >> redirection './test_files/invalid_permission' to > redirection './outfiles/outfile01' Checking for args after redirection './outfiles/outfile01' Finished collecting args for command 'echo' 'echo' Redirection AST build complete Redirection processing complete, redir_root=0x60a8d9696d30 Built AST with root type=| Executing 'echo | echo' Created left child (pid=655611) Created right child (pid=655612) Parent closing pipe ends Waiting for left child (pid=655611) ===== LEFT PIPE EXECUTION (PID=655611) ===== echo [echo] [hi] >>[./test_files/invalid_permission] >[./outfiles/outfile01] stdin=0, stdout=1, stderr=2 read=3, write=4 Closing read end (fd=3) Redirecting stdout to pipe write end (fd=4) Closing original pipe write end (fd=4) stdin=0, stdout=1, stderr=2 Processing redirection chain ===== REDIRECTION CHAIN START ===== echo (pid=655611) >> [./test_files/invalid_permission] stdin=0, stdout=1, stderr=2 './test_files/invalid_permission' Current redirection_fd=-1, out_mode=0 ===== SETUP REDIRECTION START ===== Redirection type=>>, file='./test_files/invalid_permission' Initial redirection_fd=-1, out_mode=0 stdin=0, stdout=1, stderr=2 Target command is 'echo' Updating last_out_redir './test_files/invalid_permission' (len=31) No matching outer quotes found ===== OUTPUT REDIRECTION START ===== './test_files/invalid_permission' stdout=1, redirection_fd=-1, out_mode=2 Using append mode Checking permissions for './test_files/invalid_permission' Right child (pid=655612) for 'echo' rmi >[./outfiles/outfile01]ss Right stdin redirected from pipe read end Processing redirections for right cmd ===== REDIRECTION CHAIN START ===== echo (pid=655612) > [./outfiles/outfile01] d Permission check failed stdin=0, stdout=1, stderr=2 ===== OUTPUT REDIRECTION END (FAILED) ===== './outfiles/outfile01' Final redirection_fd=-1, out_mode=2 stdin=0, stdout=1, stderr=2 Current redirection_fd=-1, out_mode=0 ===== SETUP REDIRECTION END (FAILED) ===== ===== SETUP REDIRECTION START ===== Redirection failed for file './test_files/invalid_permission' Redirection type=>, file='./outfiles/outfile01' stdin=0, stdout=1 Initial redirection_fd=-1, out_mode=0 Error code=1 stdin=0, stdout=1, stderr=2 stdin=0, stdout=1, stderr=2 Chain failed ===== REDIRECTION CHAIN END ===== Redirection failed, status=0, error_code=1 stdin=0, stdout=1, stderr=2 Executing command 'echo' Target command is 'echo' Updating last_out_redir Command execution completed with result=0 './outfiles/outfile01' (len=20) Updating result to 1 due to redirection failure No matching outer quotes found Exiting with status 1 ===== OUTPUT REDIRECTION START ===== './outfiles/outfile01' stdout=1, redirection_fd=-1, out_mode=1 Using truncate mode Checking permissions for './outfiles/outfile01' ===== SETUP OUTPUT FILE START ===== './outfiles/outfile01' stdout=1, redirection_fd=-1 1 Using truncate mode Opening file './outfiles/outfile01' with mode 577 Opened file with fd=3 Redirecting stdout to fd 3 stdout=1, redirection_fd=3 ===== SETUP OUTPUT FILE END (SUCCESS) ===== stdout=1, redirection_fd=3, out_mode=1 ===== OUTPUT REDIRECTION END (SUCCESS) ===== Final redirection_fd=3, out_mode=1 stdin=0, stdout=1, stderr=2 ===== SETUP REDIRECTION END (SUCCESS) ===== (nil) stdin=0, stdout=1, stderr=2 Chain completed successfully ===== REDIRECTION CHAIN END ===== echo 0 Left child exited with status 256 Waiting for right child (pid=655612) Right child exited with status 0 Pipe execution complete, returning status 0)
bash error = ( Permission denied)

Test 133: ❌ $PWD 
mini exit code = 2
bash exit code = 126
mini error = ( '$PWD' '$' Handling regular token Position update indicated, continuing Tokenization completed with result=1 '/home/bleow/Coding/Core/minishell/minishell_tester'] -> NULL Validating redirection targets All redirection targets valid Starting AST building Found 1 commands '/home/bleow/Coding/Core/minishell/minishell_tester' Pipe processing complete, pipe_root=(nil) Building redirection AST '/home/bleow/Coding/Core/minishell/minishell_tester' Redirection AST build complete Redirection processing complete, redir_root=(nil) Built AST with root type=CMD Is a directory)
bash error = ( Is a directory)
Test 134: ❌ $EMPTY 
mini exit code = 127
bash exit code = 0
mini error = ( '$EMPTY' '$' Handling regular token Position update indicated, continuing Tokenization completed with result=1 ''] -> NULL Validating redirection targets All redirection targets valid Starting AST building Found 1 commands '' Pipe processing complete, pipe_root=(nil) Building redirection AST '' Redirection AST build complete Redirection processing complete, redir_root=(nil) Built AST with root type=CMD Permission denied)
bash error = ()
Test 135: ❌ $EMPTY echo hi 
mini output = ()
bash output = (hi)
mini exit code = 127
bash exit code = 0
mini error = ( '$EMPTY echo hi' '$' Handling regular token Position update indicated, continuing ' ' Handling regular token Position update indicated, continuing 'e' Handling regular token 'c' Handling regular token 'h' Handling regular token 'o' Handling regular token ' ' Handling regular token Creating token type=ARGS, content='echo' Created node with args[0]='echo' ''] -> NULL Position update indicated, continuing 'h' Handling regular token 'i' Handling regular token Creating token type=ARGS, content='hi' Created node with args[0]='hi' ''] -> NULL Tokenization completed with result=1 ''] -> NULL Validating redirection targets All redirection targets valid Starting AST building Found 1 commands '' Pipe processing complete, pipe_root=(nil) Building redirection AST '' Redirection AST build complete Redirection processing complete, redir_root=(nil) Built AST with root type=CMD Permission denied)
bash error = ()
Test 136: ❌ ./test_files/invalid_permission 
mini exit code = 127
bash exit code = 126
mini error = ( './test_files/invalid_permission' '.' Handling regular token '/' Handling regular token 't' Handling regular token 'e' Handling regular token 's' Handling regular token 't' Handling regular token '_' Handling regular token 'f' Handling regular token 'i' Handling regular token 'l' Handling regular token 'e' Handling regular token 's' Handling regular token '/' Handling regular token 'i' Handling regular token 'n' Handling regular token 'v' Handling regular token 'a' Handling regular token 'l' Handling regular token 'i' Handling regular token 'd' Handling regular token '_' Handling regular token 'p' Handling regular token 'e' Handling regular token 'r' Handling regular token 'm' Handling regular token 'i' Handling regular token 's' Handling regular token 's' Handling regular token 'i' Handling regular token 'o' Handling regular token 'n' Handling regular token Creating token type=CMD, content='./test_files/invalid_permission' Created node with args[0]='./test_files/invalid_permission' './test_files/invalid_permission'] -> NULL Tokenization completed with result=1 './test_files/invalid_permission'] -> NULL Validating redirection targets All redirection targets valid Starting AST building Found 1 commands './test_files/invalid_permission' Pipe processing complete, pipe_root=(nil) Building redirection AST './test_files/invalid_permission' Redirection AST build complete Redirection processing complete, redir_root=(nil) Built AST with root type=CMD Permission denied)
bash error = ( Permission denied)

Test 141: ❌ ./test_files 
mini exit code = 2
bash exit code = 126
mini error = ( './test_files' '.' Handling regular token '/' Handling regular token 't' Handling regular token 'e' Handling regular token 's' Handling regular token 't' Handling regular token '_' Handling regular token 'f' Handling regular token 'i' Handling regular token 'l' Handling regular token 'e' Handling regular token 's' Handling regular token Creating token type=CMD, content='./test_files' Created node with args[0]='./test_files' './test_files'] -> NULL Tokenization completed with result=1 './test_files'] -> NULL Validating redirection targets All redirection targets valid Starting AST building Found 1 commands './test_files' Pipe processing complete, pipe_root=(nil) Building redirection AST './test_files' Redirection AST build complete Redirection processing complete, redir_root=(nil) Built AST with root type=CMD Is a directory)
bash error = ( Is a directory)

134/146
